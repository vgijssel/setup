esphome:
  name: ${device_name}
  platformio_options:
    board_build.f_cpu: 160000000L

esp32:
  # board: esp32doit-devkit-v1
  board: esp32dev
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_FREERTOS_UNICORE: y
      CONFIG_ESP32_DEFAULT_CPU_FREQ_160: y
      CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ: "160"
      # From https://github.com/esphome/issues/issues/2941
      # Increase watchdog timeout to flash firmware with bluetooth enabled, fixes error:
      # ERROR Error receiving acknowledge binary size: timed out
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "20"
      CONFIG_BT_BLE_50_FEATURES_SUPPORTED: n
      CONFIG_BT_BLE_42_FEATURES_SUPPORTED: y

output:
  - platform: gpio
    id: "relay_output"
    pin: GPIO26

status_led:
  pin:
    number: GPIO0
    inverted: true

# globals:
#   - id: room_topic
#     type: std::string
#     initial_value: '"room_presence/${entity_id}"'

# TODO: misconfiguration in mqtt results in wifi no longer working!
mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password
  discovery: false # Only if you use the HA API usually
  id: mqtt_client

# esp32_ble_tracker:
#   scan_parameters:
#     interval: 1.2s
#     window: 500ms
#     active: false
#   on_ble_advertise:
#     - then:
#       # Look for manufacturer data of form: 4c00 10 05 YY 98 XXXXXX
#       # Where YY can be 01..0F or 20..2F; and XXXXXX is ignored
#       - lambda: |-
#           optional<int16_t> best_rssi = nullopt;

#           for (auto data : x.get_manufacturer_datas()) {
#             // Guard against non-Apple datagrams, or those that are too small.
#             if (data.data.size() < 4 || data.uuid.to_string() != "0x004C" || data.data[0] != 0x10 || data.data[1] < 5) {
#               continue;
#             }
#             const int16_t rssi = x.get_rssi();
#             const uint8_t status_flags = data.data[2] >> 4;  // High nibble
#             const uint8_t data_flags = data.data[3];
            
#             if (data_flags == 0x98) {  // Match unlocked Apple Watch. To also match locked watch use: if (data_flags == 0x98 || data_flags == 0x18) {
#               if (status_flags == 0 || status_flags == 2) {
#                 best_rssi = max(rssi, best_rssi.value_or(rssi));
#                 ESP_LOGD("ble_adv", "Found Apple Watch (mac %s) rssi %i", x.address_str().c_str(), rssi);
#               } else {
#                 ESP_LOGD("ble_adv", "Possible Apple Watch? (mac %s) rssi %i, unrecognised status/action flags %#04x", x.address_str().c_str(), rssi, data.data[2]);
#               }
#             }
#           }
#           if (best_rssi) {
#             id(apple_watch_rssi).publish_state(*best_rssi);
#           }

esp32_ble_tracker:
  scan_parameters:
    # interval: 1.2s
    # window: 500ms
    interval: 10s
    window: 100ms
    active: false
  on_ble_advertise:
    - then:
        - lambda: |-
            for (auto data : x.get_manufacturer_datas()) {
              // Guard against non-Apple datagrams, or those that are too small.
              if (data.data.size() < 4 || data.uuid.to_string() != "0x004C" || data.data[0] != 0x10 || data.data[1] < 5) {
                continue;
              }

              const int16_t rssi = x.get_rssi();
              const uint8_t status_flags = data.data[2] >> 4;  // High nibble
              const uint8_t data_flags = data.data[3];

              // the apple watch is either locked or unlocked
              if (data_flags == 0x98 || data_flags == 0x18) {
                std::string result(x.get_tx_powers().begin(), x.get_tx_powers().end());

                ESP_LOGD("ble_adv", "New BLE device");
                ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
                ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
                ESP_LOGD("ble_adv", "  rssi: %i", x.get_rssi());
                ESP_LOGD("ble_adv", "  tx_powers: %s", result.c_str());
                ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
                for (auto uuid : x.get_service_uuids()) {
                    ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
                }
                ESP_LOGD("ble_adv", "  Advertised service data:");
                for (auto data : x.get_service_datas()) {
                    ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
                }
                ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
                for (auto data : x.get_manufacturer_datas()) {
                    ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
                }
              }

            }