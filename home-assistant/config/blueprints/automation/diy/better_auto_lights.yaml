blueprint:
  name: "Better Auto Lights"
  description: >
    Manage lights based on room presence. 
    When there is presence, it's dark enough and no manual override is effect turn on the lights.
    When there is no presence and no manual override is in effect start the away timer.
    When there is no presence, no manual override and the away timer has expired turn off the lights.
    External light control will turn on the manual override timer.
    The manual override timer will reset when paused or when expired re-enabling automation.

  domain: automation
  source_url: https://github.com/mvgijssel/setup
  input:
    presence_entity_id:
      name: Presence Entity
      selector:
        entity:
          domain: binary_sensor
          # device_class: presence

    light_and_switch_entity_ids:
      name: Light Entities
      selector:
        entity:
          multiple: true

    illuminance_entity_id:
      name: Illuminance Entity
      selector:
        entity:
          domain: sensor
          device_class: illuminance

    illuminance_threshold:
      name: Illuminance Threshold
      default: 100
      selector:
        number:
          min: 0
          mode: box
          unit_of_measurement: lx

    away_timer_entity_id:
      name: Away Timer
      selector:
        entity:
          domain: timer

    away_timer_duration:
      name: Away Timer Timeout
      default: 00:05:00
      selector:
        duration:

    manual_timer_entity_id:
      name: Manual Timer
      selector:
        entity:
          domain: timer

    manual_timer_duration:
      name: Manual Timer Timeout
      default: 12:00:00
      selector:
        duration:

# Use queue instead of restart/single because we want all instances of the automation trigger
# to happen in order, because this can influence lights with a manual override.
mode: queued
max: 10
max_exceeded: silent

trace:
  stored_traces: 100

trigger:
  - platform: state
    entity_id: !input presence_entity_id
    to:
    from:

  - platform: state
    entity_id: !input light_and_switch_entity_ids
    id: lights
    from:
    to:

  - platform: numeric_state
    entity_id: !input illuminance_entity_id
    below: !input illuminance_threshold

  # TODO: can we make away timer behave same as manual?
  - platform: state
    entity_id: !input away_timer_entity_id
    from: active
    to: idle

  - platform: state
    entity_id: !input manual_timer_entity_id
    from: active
    to:

  - platform: homeassistant
    event: start

variables:
  light_and_switch_entity_ids: !input light_and_switch_entity_ids
  switch_entity_ids: "{{ expand(light_and_switch_entity_ids) | selectattr('domain', 'equalto', 'switch') | map(attribute='entity_id') | list }}"
  light_entity_ids: "{{ expand(light_and_switch_entity_ids) | selectattr('domain', 'equalto', 'light') | map(attribute='entity_id') | list }}"

action:
  - choose:
      - conditions:
          - condition: trigger
            id: lights
        sequence:
          - if:
              - condition: template
                value_template: "{{ trigger.to_state.context.parent_id == None  }}"
            then:
              - service: timer.start
                data:
                  duration: !input manual_timer_duration
                target:
                  entity_id: !input manual_timer_entity_id

      - conditions:
          - condition: state
            entity_id: !input presence_entity_id
            state: "on"
          - condition: state
            entity_id: !input manual_timer_entity_id
            state: idle
        sequence:
          - service: timer.start
            data:
              duration: !input away_timer_duration
            target:
              entity_id: !input away_timer_entity_id
          - service: timer.pause
            data: {}
            target:
              entity_id: !input away_timer_entity_id
          - if:
              - condition: numeric_state
                entity_id: !input illuminance_entity_id
                below: !input illuminance_threshold
            then:
              - service: light.turn_on
                target:
                  entity_id: "{{ light_entity_ids }}"
              - service: switch.turn_on
                target:
                  entity_id: "{{ switch_entity_ids }}"
      - conditions:
          - condition: state
            entity_id: !input presence_entity_id
            state: "off"
          - condition: state
            entity_id: !input away_timer_entity_id
            state: paused
          - condition: state
            entity_id: !input manual_timer_entity_id
            state: idle
        sequence:
          - service: timer.start
            data:
              duration: !input away_timer_duration
            target:
              entity_id: !input away_timer_entity_id
      - conditions:
          - condition: state
            entity_id: !input presence_entity_id
            state: "off"
          - condition: state
            entity_id: !input away_timer_entity_id
            state: idle
          - condition: state
            entity_id: !input manual_timer_entity_id
            state: idle
        sequence:
          - service: switch.turn_off
            target:
              entity_id: "{{ switch_entity_ids }}"
          - service: light.turn_off
            target:
              entity_id: "{{ light_entity_ids }}"
      - conditions:
          - condition: state
            entity_id: !input manual_timer_entity_id
            state: paused
        sequence:
          - service: timer.cancel
            data: {}
            target:
              entity_id: !input manual_timer_entity_id
