blueprint:
  name: "Room - Light: Manage"
  description: >
    Manage Lights based on room presence.
    When there is no presence turn off the lights.
    When there is presence, within the time range and below the wanted illuminance, turn on the lights.
    When there is presence but one if the conditions is not met turn off the lights.
    This is a continuous process and checked every 1 minute.
    If the lights are operated outside of this automation then for the duration of the presence,
    the light is marked with manual override, meaning the automation won't turn it on/off anymore.
    Once presence is off, the manual override is removed.
  domain: automation
  source_url: https://github.com/mvgijssel/setup
  input:
    presence_entity_id:
      name: Presence Entity
      selector:
        entity:
          domain: variable

    illuminance_entity_id:
      name: Illuminance Entity
      selector:
        entity:
          domain: sensor

    illuminance_threshold:
      name: Illuminance Threshold
      default: 100
      selector:
        number:
          min: 0
          mode: box
          unit_of_measurement: lx

    light_entity_ids:
      name: Light Entities
      selector:
        entity:
          multiple: true

    start_time:
      name: Start Time
      selector:
        time:

    end_time:
      name: End Time
      selector:
        time:

    weekday:
      name: Day of the week to use the Automation
      default: [mon, tue, wed, thu, fri, sat, sun]
      selector:
        select:
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun
          custom_value: false
          multiple: true

mode: restart
max_exceeded: silent

trigger:
  - platform: state
    entity_id: !input presence_entity_id
    id: trigger_presence
    # From https://www.home-assistant.io/docs/automation/trigger/#state-trigger
    # Trigger on all state changes, but not attributes by setting to to null
    to:

  - platform: state
    entity_id: !input light_entity_ids
    id: trigger_lights

  - platform: numeric_state
    entity_id: !input illuminance_entity_id
    above: 0
    id: trigger_illuminance

  # This will make sure this automation is at least re-evaluated every minute
  - platform: time_pattern
    minutes: /1
    id: trigger_time

variables:
  light_entity_ids: !input light_entity_ids
  presence_entity_id: !input presence_entity_id
  presence_variable: "{{ expand(presence_entity_id)[0].object_id }}"

action:
  - if:
      - condition: and
        conditions:
          - condition: trigger
            id: trigger_presence

          - condition: state
            entity_id: !input presence_entity_id
            state: "on"

          - condition: template
            value_template: >
              {% set light_entities = expand(light_entity_ids) %} 
              {% set is_light_on = light_entities | selectattr("state", "equalto", "on") | list | length > 0 %} 
              {{ is_light_on }}
    then:
      - service: variable.set_variable
        data:
          variable: "{{ presence_variable }}"
          attributes:
            light_manual_override: "on"
      - stop: >
          Lights were already on before presence was triggered. 
          Manual override in effect, stopping execution.

  - if:
      - condition: trigger
        id: trigger_lights
    then:
      - if:
          - condition: state
            entity_id: !input presence_entity_id
            state: "off"
        then:
          - stop: No presence detected. Stopping execution.

      - if:
          - condition: template
            value_template: >
              {{ trigger.to_state.context.parent_id == expand(presence_entity_id)[0].attributes.trigger_context_id }}
        then:
          - stop: Light triggered by automation. Stopping execution.

        else:
          - service: variable.set_variable
            data:
              variable: "{{ presence_variable }}"
              attributes:
                light_manual_override: "on"
          - stop: Light triggered externally, flagging manual override. Stopping execution.

  - if:
      - condition: state
        entity_id: !input presence_entity_id
        state: "off"
    then:
      - service: variable.set_variable
        data:
          variable: "{{ presence_variable }}"
          attributes:
            light_manual_override: "off"
            trigger_context_id: ""

      # TODO: filter the light_entity_ids based on the type and create an array
      # for switch and array for light
      # only call the service when there are entitity ids available.
      - service: switch.turn_off
        target:
          entity_id: !input light_entity_ids

      - service: light.turn_off
        data:
          transition: 1
        target:
          entity_id: !input light_entity_ids

    else:
      - if:
          - condition: state
            entity_id: !input presence_entity_id
            attribute: light_manual_override
            state: "on"
        then:
          - stop: Manual override in effect. Stopping execution.

      # Update the presence state with the trigger context id
      # if this update has been triggered by a state change.
      - if:
          - condition: template
            value_template: '{{ trigger.platform == "state" }}'
        then:
          - service: variable.set_variable
            data:
              variable: "{{ presence_variable }}"
              attributes:
                trigger_context_id: "{{ trigger.to_state.context.id }}"
                light_manual_override: "off"

      - if:
          - condition: and
            conditions:
              - condition: time
                weekday: !input weekday
                after: !input start_time
                before: !input end_time

              - condition: numeric_state
                entity_id: !input illuminance_entity_id
                below: !input illuminance_threshold
        then:
          - service: light.turn_on
            data:
              transition: 1
            target:
              entity_id: !input light_entity_ids

          - service: switch.turn_on
            target:
              entity_id: !input light_entity_ids
        else:
          - service: switch.turn_off
            target:
              entity_id: !input light_entity_ids

          - service: light.turn_off
            data:
              transition: 1
            target:
              entity_id: !input light_entity_ids
