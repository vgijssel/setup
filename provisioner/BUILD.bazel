load("//tools/pyinfra:defs.bzl", "pyinfra_run")
load("@rules_task//:defs.bzl", "cmd", "task", "task_test")
load("//tools/docker:docker.bzl", "docker_load")
load("@pip-setup//:requirements.bzl", "requirement")
load("//tools/onepassword:defs.bzl", "secrets")

pyinfra_run(
    name = "provision",
    srcs = [
        "connectors/teleport.py",
        "deploys/docker/tasks/install_docker.py",
        "deploys/microk8s/tasks/install_microk8s.py",
        "deploys/monitoring/tasks/install_monitoring.py",
        "deploys/network/tasks/install_network.py",
        "deploys/teleport/tasks/install_teleport.py",
        "group_data/dev.py",
        "group_data/prod.py",
        "group_data/test.py",
        "utils.py",
    ],
    args = [
        "--data install_network=True",
        "--data install_docker=True",
        "--data install_monitoring=True",
        "--data install_microk8s=True",
        "--data install_teleport=True",
    ],
    data = [
        "deploys/microk8s/files/cmdline.txt",
        "deploys/monitoring/files/docker-compose.yml.j2",
        "deploys/monitoring/files/newrelic-infra.yml.j2",
        "deploys/monitoring/files/nri-prometheus-config.yaml",
        "deploys/network/files/99_config.yaml",
        "deploys/teleport/files/teleport.yaml.j2",
    ],
    deploy = "deploy.py",
    env = {
        "TELEPORT_TSH_BINARY": cmd.executable("//tools/teleport:tsh"),
        "OP_BINARY": cmd.executable("//tools/onepassword:op"),
    },
    inventory = "inventory.py",
    deps = [
        "//tools/onepassword:lib",
    ],
)

task(
    name = "deploy_provision",
    cmds = [
        secrets({
            "TELEPORT_BUILDBUDDY_IDENTITY": "teleport_buildbuddy_identity.notesPlain",
        }),
        "export TELEPORT_IDENTITY=$(mktemp)",
        {"defer": "rm -f $TELEPORT_IDENTITY"},
        'echo "$TELEPORT_BUILDBUDDY_IDENTITY" > $TELEPORT_IDENTITY',
        cmd.executable(":provision"),
    ],
    env = {
        "SETUP_ENV": "prod",
        "OP_BINARY": cmd.executable("//tools/onepassword:op"),
    },
    exec_properties = {
        "include-secrets": "true",
    },
    deps = ["//tools/onepassword:lib"],
)

task(
    name = "deploy_validate",
    cmds = [
        secrets({
            "TELEPORT_BUILDBUDDY_IDENTITY": "teleport_buildbuddy_identity.notesPlain",
        }),
        "export TELEPORT_IDENTITY=$(mktemp)",
        {"defer": "rm -f $TELEPORT_IDENTITY"},
        'echo "$TELEPORT_BUILDBUDDY_IDENTITY" > $TELEPORT_IDENTITY',
        cmd.python("""
        import os
        os.environ['PATH'] = os.path.dirname(os.environ['SSH_BINARY']) + ':' + os.environ['PATH']
        """),
        cmd.executable(":validate"),
    ],
    env = {
        "SETUP_ENV": "prod",
        "OP_BINARY": cmd.executable("//tools/onepassword:op"),
        "SSH_BINARY": cmd.executable(":ssh"),
    },
    exec_properties = {
        "include-secrets": "true",
    },
    deps = ["//tools/onepassword:lib"],
)

task(
    name = "ssh",
    cmds = [
        cmd.python("""
        import os
        cli_args = os.environ["CLI_ARGS"]
        # TODO: removing unsupported cli args to tsh for now until https://github.com/gravitational/teleport/issues/27441 is fixed.
        cli_args = cli_args.replace("-o User=ubuntu", "")
        cli_args = cli_args.replace("-o ConnectTimeout=0", "")
        os.environ['CLI_ARGS'] = cli_args
        """),
        cmd.shell(
            cmd.executable("//tools/teleport:tsh"),
            "ssh",
            "--login",
            "ubuntu",
            "--identity",
            "$TELEPORT_IDENTITY",
            "$CLI_ARGS",
        ),
    ],
)

task(
    name = "deploy",
    cmds = [
        "export COMMIT_SHA=$(git rev-parse HEAD)",
        cmd.shell(
            cmd.executable(":deploy_mark"),
            "$COMMIT_SHA",
        ),
        cmd.executable(":deploy_provision"),
        cmd.executable(":deploy_validate"),
    ],
    cwd = "$BUILD_WORKSPACE_DIRECTORY",
    env = {
        "SETUP_ENV": "prod",
    },
)

py_binary(
    name = "deploy_mark_binary",
    srcs = [
        "deploy_mark.py",
    ],
    main = "deploy_mark.py",
    deps = [
        requirement("requests"),
    ],
)

task(
    name = "deploy_mark",
    cmds = [
        secrets({
            "ENTITY_GUID": "provisioner-mark-new-relic-api-key.entity_guid",
            "NEW_RELIC_API_KEY": "provisioner-mark-new-relic-api-key.password",
        }),
        cmd.shell(
            cmd.executable(":deploy_mark_binary"),
            "$CLI_ARGS",
        ),
    ],
    env = {
        "OP_BINARY": cmd.executable("//tools/onepassword:op"),
    },
    exec_properties = {
        "include-secrets": "true",
    },
    deps = ["//tools/onepassword:lib"],
)

task_test(
    name = "deploy_test",
    size = "large",
    cmds = [
        cmd.shell(
            cmd.executable(":deploy_mark"),
            "test-commit-sha",
        ),
        cmd.executable(":deploy_provision"),
        cmd.shell(
            cmd.executable(":deploy_validate"),
            "||",
            "true",
        ),
    ],
    env = {
        "PYINFRA_RUN_ARGS": "--dry",
        "SETUP_ENV": "test",
    },
)

docker_load(
    name = "load_dev_image",
    exec_properties = {
        "workload-isolation-type": "firecracker",
        "init-dockerd": "true",
        "recycle-runner": "true",
    },
    image = "//tools/ubuntu:ubuntu_snap_base_image",
)

task(
    name = "run_dev_image",
    cmds = [
        "export CONTAINER_IMAGE=$($load_dev_image)",
        cmd.shell(
            "docker run",
            "--rm",
            "--detach",
            "--publish 127.0.0.1:10443:443",
            "--tmpfs /run",
            "--tmpfs /run/lock",
            "--tmpfs /tmp",
            "--privileged",
            "-v /lib/modules:/lib/modules:ro",
            "-h provisioner",
            "$CLI_ARGS",
            "$CONTAINER_IMAGE",
            "/sbin/init",
        ),
    ],
    env = {
        "load_dev_image": cmd.executable(":load_dev_image"),
    },
    exec_properties = {
        "workload-isolation-type": "firecracker",
        "init-dockerd": "true",
        "recycle-runner": "true",
    },
)

task(
    name = "dev",
    cmds = [
        "docker rm -f provisioner_dev",
        "export CONTAINER_ID=$($run_dev_image)",
        {"defer": "docker rm -f $CONTAINER_ID"},
        "docker logs -f $CONTAINER_ID",
    ],
    env = {
        "run_dev_image": cmd.shell(
            cmd.executable(":run_dev_image"),
            "--name provisioner_dev",
        ),
    },
)

task(
    name = "validate",
    cmds = [
        secrets({
            "NEW_RELIC_API_KEY": "provisioner-validate-new-relic-api-key.password",
        }),
        cmd.python("""
        import os
        setup_env = os.environ.get("SETUP_ENV", 'dev')

        os.environ['OTEL_EXPORTER_OTLP_ENDPOINT'] = 'https://otlp.eu01.nr-data.net:443'
        os.environ['OTEL_EXPORTER_OTLP_HEADERS'] = 'api-key=' + os.environ['NEW_RELIC_API_KEY']
        os.environ['OTEL_RESOURCE_ATTRIBUTES'] = 'service.name=provisioner-validate,env=' + setup_env

        if setup_env == 'test':
            os.environ['VALIDATE_HOST'] = f"docker://root@{os.environ['CONTAINER_ID']}"
        elif setup_env == 'prod':
            os.environ['VALIDATE_HOST'] = f"ssh://ubuntu@provisioner?timeout=0&controlpersist=0"
        else:
            os.environ['VALIDATE_HOST'] = f"docker://root@provisioner_dev"
        """),
        cmd.python_entry_point("pytest:console_main", "--export-traces", "-vv", "-ra", "--hosts=\"$VALIDATE_HOST\"", "$tests"),
    ],
    env = {
        "tests": cmd.files("test_provisioner.py"),
        "OTEL_RESOURCE_ATTRIBUTES": "service.name=provisioner-validate,env=dev",
        "OP_BINARY": cmd.executable("//tools/onepassword:op"),
    },
    deps = [
        requirement("pytest-testinfra"),
        requirement("pyyaml"),
        requirement("semver"),
        requirement("pytest-opentelemetry"),
        "//tools/onepassword:lib",
    ],
)

task_test(
    name = "test",
    size = "large",
    cmds = [
        "export CONTAINER_ID=$($run_dev_image)",
        {"defer": "docker rm -f $CONTAINER_ID"},
        "$provision",
        "$validate",
    ],
    env = {
        "run_dev_image": cmd.executable(":run_dev_image"),
        "provision": cmd.executable(":provision"),
        "validate": cmd.executable(":validate"),
        "SETUP_ENV": "test",
    },
    exec_properties = {
        "workload-isolation-type": "firecracker",
        "init-dockerd": "true",
        "recycle-runner": "true",
        "include-secrets": "true",
    },
)
