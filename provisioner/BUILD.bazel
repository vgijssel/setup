load("//tools/pyinfra:defs.bzl", "pyinfra_run")
load("@rules_task//:defs.bzl", "cmd", "task", "task_test")
load("//tools/docker:docker.bzl", "docker_load")
load("@pip-setup//:requirements.bzl", "requirement")

pyinfra_run(
    name = "provision",
    srcs = [
        "deploys/microk8s/tasks/install_microk8s.py",
        "deploys/network/tasks/install_network.py",
    ],
    args = [
        "--data install_network=True",
        "--data install_microk8s=True",
    ],
    data = [
        "deploys/microk8s/files/cmdline.txt",
        "deploys/network/files/99_config.yaml",
    ],
    deploy = "deploy.py",
    inventory = "inventory.py",
)

docker_load(
    name = "load_dev_image",
    image = "//tools/ubuntu:ubuntu_snap_base_image",
)

task(
    name = "run_dev_image",
    cmds = [
        "export CONTAINER_IMAGE=$($load_dev_image)",
        cmd.shell(
            "docker run",
            "--rm",
            "--detach",
            "--tmpfs /run",
            "--tmpfs /run/lock",
            "--tmpfs /tmp",
            "--privileged",
            "-v /lib/modules:/lib/modules:ro",
            "$CLI_ARGS",
            "$CONTAINER_IMAGE",
            "/sbin/init",
        ),
    ],
    env = {
        "load_dev_image": cmd.executable(":load_dev_image"),
    },
)

task(
    name = "dev",
    cmds = [
        "export CONTAINER_ID=$($run_dev_image)",
        {"defer": "docker rm -f $CONTAINER_ID"},
        "docker logs -f $CONTAINER_ID",
    ],
    env = {
        "run_dev_image": cmd.shell(
            cmd.executable(":run_dev_image"),
            "--name provisioner_dev",
        ),
    },
)

task(
    name = "validate",
    cmds = [
        cmd.python("""
        import os
        setup_env = os.environ.get("SETUP_ENV", 'dev')

        if setup_env == 'test':
            os.environ['VALIDATE_HOST'] = os.environ['CONTAINER_ID']
        else:
            os.environ['VALIDATE_HOST'] = 'provisioner_dev'
        """),
        cmd.python_entry_point("pytest:console_main", "-vv", "-ra", "--hosts=\"docker://ubuntu@$VALIDATE_HOST\"", "$tests"),
    ],
    env = {
        "tests": cmd.files("test_provisioner.py"),
    },
    deps = [requirement("pytest-testinfra")],
)

task_test(
    name = "test",
    cmds = [
        "export CONTAINER_ID=$($run_dev_image)",
        {"defer": "docker rm -f $CONTAINER_ID"},
        "$provision",
        "$validate",
    ],
    env = {
        "run_dev_image": cmd.executable(":run_dev_image"),
        "provision": cmd.executable(":provision"),
        "validate": cmd.executable(":validate"),
        "SETUP_ENV": "test",
    },
)
