---
- name: 'Provision Provisioner'
  hosts: all
  gather_facts: true
  become: true
  collections:
    - containers.podman

  tasks:
    - set_fact:
        version_id: "{{ hostvars[inventory_hostname].ansible_distribution_version }}"

    # From https://podman.io/getting-started/installation#linux-distributions
    - name: Add kubic apt key
      tags: ['podman']
      ansible.builtin.apt_key:
        url: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/testing/xUbuntu_{{ version_id }}/Release.key"
        state: present

    - name: Add kubic repository
      tags: ['podman']
      ansible.builtin.apt_repository:
        repo: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/testing/xUbuntu_{{ version_id }}/ /"
        state: present
        filename: devel:kubic:libcontainers:testing

    - name: Update apt cache
      tags: ['podman']
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Ensure CNI directory exists
      tags: ['podman']
      file:
        path: /opt/cni/bin
        state: directory

    # From https://discuss.hashicorp.com/t/failed-to-find-plugin-bridge-in-path/3095
    - name: Install CNI plugins
      tags: ['podman']
      ansible.builtin.unarchive:
        src: https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz
        dest: /opt/cni/bin
        remote_src: yes

    - name: Install podman and dependencies
      tags: ['podman']
      package: 
        name: "{{ item }}"
        state: present
      loop: 
        - runc
        - podman

    - name: Create volume for digitalrebar
      tags: ['digitalrebar']
      podman_volume:
        state: present
        name: digitalrebar-data

    - name: Copy digitalrebar image tar into machine
      tags: ['digitalrebar']
      copy:
        src: "{{ digitalrebar_tar_location }}"
        dest: /tmp/digitalrebar.tar

    - name: Create digitalrebar image from tar
      tags: ['digitalrebar']
      command: podman image load -i /tmp/digitalrebar.tar

    - name: Create digitalrebar container
      tags: ['digitalrebar']
      podman_container:
        name: digitalrebar
        image: "{{ digitalrebar_image }}"
        network: host
        log_driver: journald
        state: created
        recreate: yes
        privileged: true
        volume:
          - digitalrebar-data:/provision/drp-data

    - name: Create digitalrebar systemd entry
      tags: ['digitalrebar']
      command: podman generate systemd --files --name digitalrebar
      args:
        chdir: /usr/lib/systemd/system

    - name: Enable digitalrebar service
      tags: ['digitalrebar']
      command: systemctl enable container-digitalrebar.service

    - name: Reset cloud-init
      tags: ['cloud-init']
      command: cloud-init clean

    - name: Cleanup files
      tags: ['cloud-init']
      file:
        path: "{{ item }}"
        state: absent
      loop:
      - /home/ubuntu/.ssh/authorized_keys
      - /etc/netplan/50-cloud-init.yaml
      - /var/log/cloud-init.log
      - /var/log/cloud-init-output.log

    - name: Clear tmp directory
      tags: ['cloud-init']
      command: rm -rf /tmp/*

    - name: Create necessary seed directory
      file:
        path: /var/lib/cloud/seed/nocloud-net
        state: directory

    - name: Copy cloud-init user-data
      tags: ['cloud-init']
      copy:
        src: "{{ item }}"
        dest: /var/lib/cloud/seed/nocloud-net
        owner: root
        group: root
        mode: '0644'
      loop:
        - ./cloud-init/prod/user-data
        - ./cloud-init/prod/meta-data
        - ./cloud-init/prod/vendor-data
