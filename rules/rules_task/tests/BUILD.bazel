load("@rules_task//task:defs.bzl", "cmd", "task", "task_test")
load("@pip//:requirements.bzl", "requirement")
load("@rules_python//python:defs.bzl", "py_binary")

package(default_visibility = ["//visibility:public"])

filegroup(
    name = "all_files",
    srcs = glob(["**/*"]),
)

py_binary(
    name = "test_py_binary",
    srcs = ["test_py_binary.py"],
)

py_binary(
    name = "test_py_binary_with_runfile",
    srcs = ["test_py_binary_with_runfile.py"],
    data = [
        "files/test_file.txt",
    ],
    deps = [
        requirement("bazel-runfiles"),
    ],
)

filegroup(
    name = "test_filegroup",
    srcs = [
        "files/test_file.txt",
        "files/test_second_file.txt",
    ],
)

task(
    name = "hello",
    cmds = [
        "SOMEVAR=$(echo Hello, world!)",
        "echo $SOMEVAR",
    ],
)

task(
    name = "broken",
    cmds = [
        "echo Some error! >&2",
        "exit 1",
        "echo This will not be printed!",
    ],
)

task(
    name = "cwd",
    cmds = [
        "echo $TEST_TMPDIR",
        "pwd >&2",
    ],
    cwd = "$TEST_TMPDIR",
)

task(
    name = "cwd_jinja",
    cmds = [
        "echo $TEST_TMPDIR",
        "pwd >&2",
    ],
    cwd = "{{ os.environ.get('TEST_TMPDIR', os.environ['BUILD_WORKING_DIRECTORY']) }}",
)

task(
    name = "file",
    cmds = [
        cmd.shell(
            "cat",
            cmd.file("files/test_file.txt"),
            cmd.file("files/test_file.txt"),
        ),
    ],
)

task(
    name = "py_binary",
    cmds = [
        cmd.executable(":test_py_binary"),
    ],
)

task(
    name = "py_binary_with_runfile",
    cmds = [
        cmd.executable(":test_py_binary_with_runfile"),
    ],
)

genrule(
    name = "genrule",
    outs = ["genrule_output.txt"],
    cmd = """
    echo "from genrule" > $@
    $(location :py_binary_with_runfile) >> $@
    """,
    tools = [
        ":py_binary_with_runfile",
    ],
)

task(
    name = "cwd_with_env",
    cmds = [
        "cat $INPUT_FILE",
    ],
    cwd = "$(dirname $INPUT_FILE)",
    env = {
        "INPUT_FILE": cmd.file("files/test_file.txt"),
    },
)

genrule(
    name = "genrule_with_cwd",
    outs = ["genrule_with_cwd_output.txt"],
    cmd = """
    $(location :cwd_with_env) > $@
    """,
    tools = [
        ":cwd_with_env",
    ],
)

task(
    name = "filegroup",
    cmds = [
        cmd.shell(
            "cat",
            cmd.files(":test_filegroup"),
        ),
    ],
)

task(
    name = "python",
    cmds = [
        cmd.python("""
        import os
        import sys
        os.environ['SOMEVAR'] = \"\"\"
        some
        value
        \"\"\"
        sys.exit(0)
        os.environ['SOMEVAR'] = 'this should not be printed'
        """),
        "echo $SOMEVAR",
    ],
)

task(
    name = "python_entry_point",
    cmds = [
        cmd.python_entry_point("black:patched_main", "--version"),
    ],
    deps = [
        requirement("black"),
    ],
)

task(
    name = "env",
    cmds = [
        "echo $FOO",
        "$hello",
        "$python",
        "$command",
    ],
    env = {
        "FOO": "BAR's value",
        "hello": cmd.executable(":hello"),
        "python": cmd.executable(":python"),
        "command": cmd.shell("echo", "some", "inline", "shell"),
    },
)

task(
    name = "defer",
    cmds = [
        "echo first",
        "export FIRST_DEFER=$(echo first defer)",
        {"defer": "echo $FIRST_DEFER"},
        cmd.shell("echo", "second"),
        cmd.defer(cmd.shell("echo", "second", "defer")),
        "exit 2",
        "echo not printed",
        cmd.defer(cmd.python("print('not printed defer')")),
    ],
)

task(
    name = "cli_args",
    cmds = [
        "echo $CLI_ARGS",
    ],
)

task(
    name = "cat",
    cmds = [
        "cat",
    ],
)

task(
    name = "capture_stdin",
    cmds = [
        "echo 'hello from stdin' | $other_cmd",
    ],
    env = {
        "other_cmd": cmd.executable(":cat"),
    },
)

task_test(
    name = "task_test_test",
    cmds = [
        "exit 0",
    ],
)

task(
    name = "stamp_stable",
    cmds = [
        # cmd.shell(
        #     "echo",
        #     cmd.file("files/test_file.txt"),
        # ),
        "pwd",
        cmd.shell(
            "echo",
            cmd.info_file(),
        ),
        cmd.shell(
            "cat",
            cmd.info_file(),
        ),
    ],
)

genrule(
    name = "stamp_stable_genrule",
    outs = ["stamp_stable_genrule_output.txt"],
    cmd = """
    echo "from stamp_stable_genrule" > $@
    $(location :stamp_stable) >> $@
    """,
    tools = [
        ":stamp_stable",
    ],
)

py_test(
    name = "test",
    srcs = [
        "pytest_wrapper.py",
        "test.py",
    ],
    args = [
        "-ra",
        "-vv",
    ] + ["$(location :%s)" % x for x in ["test.py"]],
    data = [
        ":broken",
        ":capture_stdin",
        ":cli_args",
        ":cwd",
        ":cwd_jinja",
        ":cwd_with_env",
        ":defer",
        ":env",
        ":file",
        ":filegroup",
        ":genrule",
        ":genrule_with_cwd",
        ":hello",
        ":py_binary",
        ":py_binary_with_runfile",
        ":python",
        ":python_entry_point",
        ":stamp",
    ],
    env = {
        "WORKSPACE_NAME": package_relative_label(":test").workspace_name,
    },
    main = "pytest_wrapper.py",
    deps = [
        requirement("bazel-runfiles"),
        requirement("tomli"),
        requirement("pytest"),
    ],
)
