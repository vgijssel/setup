load("@rules_task//:defs.bzl", "cmd", "task")
load("@pip//:requirements.bzl", "dist_info_requirement", "requirement")

py_binary(
    name = "test_py_binary",
    srcs = ["test_py_binary.py"],
)

filegroup(
    name = "test_filegroup",
    srcs = [
        "test_file.txt",
        "test_second_file.txt",
    ],
)

task(
    name = "hello",
    cmds = [
        "echo Hello, world!",
    ],
)

task(
    name = "broken",
    cmds = [
        "echo Some error! >&2",
        "exit 1",
        "echo This will not be printed!",
    ],
)

task(
    name = "cwd",
    cmds = [
        "echo $TEST_TMPDIR",
        "pwd >&2",
    ],
    cwd = "$TEST_TMPDIR",
)

task(
    name = "file",
    cmds = [
        cmd.shell(
            "cat",
            cmd.file("test_file.txt"),
        ),
    ],
)

task(
    name = "py_binary",
    cmds = [
        cmd.executable(":test_py_binary"),
    ],
)

task(
    name = "filegroup",
    cmds = [
        cmd.shell(
            "cat",
            cmd.files(":test_filegroup"),
        ),
    ],
)

print(requirement("black"))

print(dist_info_requirement("black"))

# Could get the dist-info from black using dist_info_requirement("black")
# this contains entry_points.txt
# which contains the entry point for black

task(
    name = "python_entry_point",
    cmds = [
        cmd.python_entry_point("black:patched_main", "--help"),
    ],
    data = [
        # "@@rules_python~0.20.0~pip~pip//:black_pkg",
        "@@rules_python~0.20.0~pip~pip_black//:pkg",
        # "@@black-requirements_black//:pkg",
    ],
    deps = [
        requirement("black"),
    ],
)

py_test(
    name = "test",
    srcs = [
        "pytest_wrapper.py",
        "test.py",
    ],
    args = [
        "-ra",
        "-vv",
    ] + ["$(location :%s)" % x for x in ["test.py"]],
    data = [
        ":broken",
        ":cwd",
        ":file",
        ":filegroup",
        ":hello",
        ":py_binary",
        ":python_entry_point",
    ],
    env = {
        "WORKSPACE_NAME": package_relative_label(":test").workspace_name,
    },
    main = "pytest_wrapper.py",
    deps = [
        requirement("bazel-runfiles"),
        requirement("tomli"),
        requirement("pytest"),
    ],
)
