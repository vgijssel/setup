load("@rules_task//task:defs.bzl", "cmd")
load("//tools:defs.bzl", "publish_github_release", release = "release_changed_files")
load("@aspect_bazel_lib//lib:tar.bzl", "mtree_spec", "tar")
load("@npm//:defs.bzl", "npm_link_all_packages")

npm_link_all_packages()

package(default_visibility = ["//visibility:public"])

_darwin_arm64 = [
    "@platforms//os:macos",
    "@platforms//cpu:arm64",
]

_linux_amd64 = [
    "@platforms//os:linux",
    "@platforms//cpu:x86_64",
]

_linux_arm64 = [
    "@platforms//os:linux",
    "@platforms//cpu:arm64",
]

config_setting(
    name = "is_linux_amd64",
    constraint_values = _linux_amd64,
)

config_setting(
    name = "is_linux_arm64",
    constraint_values = _linux_arm64,
)

config_setting(
    name = "is_darwin_arm64",
    constraint_values = _darwin_arm64,
)

filegroup(
    name = "all_files",
    srcs = glob(["**/*"]) + [
        "//release:all_files",
        "//release/private:all_files",
        "//tools:all_files",
        "//tools/private:all_files",
    ],
)

mtree_spec(
    name = "release_archive_mtree",
    srcs = [
        ":all_files",
    ],
)

# Remove `../rules_release~override` from each line because otherwise
# this results in an empty archive when extracting.
genrule(
    name = "release_archive_mtree_normalized",
    srcs = [
        ":release_archive_mtree",
    ],
    outs = [
        "release_archive_mtree_normalized.spec",
    ],
    cmd = """
    sed 's|../{}/||' $< > $@
    """.format(repository_name().removeprefix("@")),
)

tar(
    name = "release_archive",
    srcs = [
        ":all_files",
    ],
    out = "rules_release.tar.gz",
    compress = "gzip",
    mtree = ":release_archive_mtree_normalized",
)

genrule(
    name = "github_release_template",
    srcs = [
        ":release.version_changelog",
        ":release.version",
        ":release_archive",
        "@examples_workspace//:WORKSPACE",
    ],
    outs = [
        "github_release_template.txt",
    ],
    cmd = """
VERSION="v$$(cat $(location :release.version))"
SHA=$$(shasum -a 256 $(location :release_archive) | awk '{print $$1}')
PREFIX="rules_release-$${VERSION}"
ARCHIVE="rules_release.tar.gz"
WORKSPACE_CONTENT=$$(cat $(location @examples_workspace//:WORKSPACE))
SEARCH_TARGET_LINE="#### Generic for each workspace file"
FILTERED_WORKSPACE_CONTENT=$$(echo "$$WORKSPACE_CONTENT" | sed "1,/$$SEARCH_TARGET_LINE/d")

cat <<EOF > $(OUTS)
## Using WORKSPACE:

\\`\\`\\`starlark
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "rules_release",
    sha256 = "$${SHA}",
    url = "https://github.com/vgijssel/setup/releases/download/$${PREFIX}/$${ARCHIVE}",
)

$$FILTERED_WORKSPACE_CONTENT
\\`\\`\\`
EOF

cat $(location :release.version_changelog) >> $(OUTS)
    """,
)

publish_github_release(
    name = "publish_github_release",
    assets = [
        ":release_archive",
    ],
    before_cmds = [
        "export OP_SERVICE_ACCOUNT_TOKEN=${ONEPASSWORD_SERVICE_ACCOUNT_TOKEN_PROD:-}",
        "GH_TOKEN=$($OP read op://vgijssel-prod/github-release/credential)",
        "export GH_TOKEN",
    ],
    changelog_file = ":github_release_template",
    env = {
        "OP": cmd.executable("//tools/onepassword:op"),
    },
    release = ":release",
)

release(
    name = "release",
    changed_file_paths = [
        "rules/rules_release",
    ],
    changelog_file = "CHANGELOG.md",
    publish_cmds = [
        ":publish_github_release",
    ],
    release_name = "rules_release",
    version_file = "version.txt",
    deps = [
        "@rules_task//:release",
    ],
)
