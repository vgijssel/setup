def pex_binary(name:str, packages:list, pex_toolchain:str, python_toolchain:str, scripts:list, visibility:list = None, test_only:bool = False) -> str:
    relative_anchor = text_file(
        name = f"_{name}#relative_anchor",
        content = "relative",
        binary = True,
        visibility = visibility,
        test_only = test_only,
    )

    absolute_anchor = text_file(
        name = f"_{name}#absolute_anchor",
        content = "absolute",
        binary = True,
        visibility = visibility,
        test_only = test_only,
    )

    packages_string = " ".join(packages)

    pex_binary = genrule(
        name = f"_{name}#pex",
        outs = [f"{name}.pex"],
        binary = True,
        cmd = f"""
        # TODO: hacky way to get the please root to be able to define the relative cache dir
        ABSOLUTE_DIR="$(dirname $TOOLS_ABSOLUTE_ANCHOR)"
        RELATIVE_DIR=$(out_dir {relative_anchor})
        export PLEASE_ROOT="${ABSOLUTE_DIR%"/$RELATIVE_DIR"}"
        export PEX_ROOT="$PLEASE_ROOT/{CONFIG.PEX_CACHE_DIR}"

        $TOOLS_PEX --python $TOOLS_PYTHON --compile --venv -v -o $OUTS {packages_string}
        """,
        tools = {
            "absolute_anchor": absolute_anchor,
            "pex": pex_toolchain,
            "python": f"{python_toolchain}|python",
        },
        deps = [
            relative_anchor,
        ],
        visibility = visibility,
        test_only = test_only,
    )

    entry_points = {}
    cmds = []

    for script in scripts:
        entry_points[script] = f"out/{script}"
        cmd = f"""
        COMMAND="PATH="$(dirname $(out_location {python_toolchain}|python)):\\\$PATH" PEX_SCRIPT={script} $(out_location {pex_binary}) \\\$@"
        {{ cat > "$OUTS/{script}" << EOF\n#!/usr/bin/env bash\n$COMMAND\nEOF\n}}
        """
        cmds.append(cmd)

    cmds_string = "\n".join(cmds)

    genrule(
        name = name,
        outs = ["out"],
        binary = True,
        cmd = f"""
        mkdir -p $OUTS
        {cmds_string}
        """,
        entry_points = entry_points,
        deps = [
            pex_binary,
            python_toolchain,
        ],
    )

def python_toolchain(name:str, version:str, visibility:list = None, test_only:bool = False) -> str:
    # Inspired by the asdf-python plugin 
    # https://github.com/danhper/asdf-python/blob/8ab052fced78b2c68c8fe17d5811d0ebae06eee8/bin/install
    return genrule(
        name = name,
        binary = True,
        cmd = f"""
        set -e

        git clone https://github.com/pyenv/pyenv.git pyenv
        PYTHON_BUILD=pyenv/plugins/python-build/bin/python-build

        # can use --verbose for debugging
        $PYTHON_BUILD {version} $OUTS
        """,
        entry_points = {
            "python": "out/bin/python",
        },
        outs = ["out"],
        visibility = visibility,
        test_only = test_only,
    )