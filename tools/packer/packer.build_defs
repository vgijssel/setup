def packer_build(
    toolchain:str,
    name:str,
    templates:list,
    outs:list,
    variables:dict = {},
    srcs:dict = [],
    deps:list = [],
    tools:dict = {},
    env:dict = {},
  ) -> str:

  templates_group = filegroup(
      name = f"{name}_templates",
      srcs = templates,
  )

  variables_sh = '\n'.join([
    'export PKR_VAR_{}=$({})'.format(k, v) for k, v in variables.items()
  ])

  env_sh = '\n'.join([
    'export {}=$({})'.format(k, v) for k, v in env.items()
  ])

  deps = deps + [templates_group]

  tools['packer'] = toolchain

  return genrule(
      name = name,
      tools = tools,
      srcs = srcs,
      deps = deps,
      outs = outs,
      env = {
        "USER": "packer",
      },
      cmd = f"""
      {variables_sh}
      {env_sh}

      $TOOLS_PACKER build -force -on-error=ask "$(dir {templates_group})"
      """,
  )

#   return genrule(
#       name = name,
#       srcs = {
#         "ansible_playbook": ansible_playbook,
#         "ansible_config": "//build_helpers/defs:ansible.cfg",
#         "template": "//build_helpers/defs:packer_qemu.pkr.hcl",
#         "id_rsa": "//secrets:id_rsa",
#         "cd_files": cd_files,
#         "srcs": srcs,
#       },
#       outs = {
#         "log": [f"output/{name}.packer.log"],
#         "image": [f"output/{name}.qcow2"],
#       },
#       deps = [
#         "//tools:ubuntu_iso",
#         "//tools:ubuntu_checksum",
#       ],
#       # TODO: instead of defining the variables in bash 
#       # create a separate variables.auto.pkrvars.hcl which is automatically
#       # loaded by packer. See
#       # https://www.packer.io/guides/hcl/variables
#       cmd = f"""
#       set -Eeou pipefail

#       # Can remove this if we define cd_files as a dir instead of a list of files
#       cd_files_array=($SRCS_CD_FILES)
#       cd_files_json=$($TOOLS_JQ --compact-output --null-input '$ARGS.positional' --args "${cd_files_array[@]}")

#       export PKR_VAR_iso_file="$(location //tools:ubuntu_iso)"
#       export PKR_VAR_iso_checksum="$(location //tools:ubuntu_checksum)"
#       export PKR_VAR_output_directory="output"
#       export PKR_VAR_ssh_private_key_file="$SRCS_ID_RSA"

#       export PKR_VAR_arch="$ARCH"

#       export ANSIBLE_CONFIG="$SRCS_ANSIBLE_CONFIG"
#       export PKR_VAR_ansible_playbook="$SRCS_ANSIBLE_PLAYBOOK"
#       export PKR_VAR_ansible_arguments='{ansible_arguments_json}'
#       export PKR_VAR_ansible_command="$TOOLS_ANSIBLE_PLAYBOOK"
#       export PKR_VAR_awd="$PWD"
#       export PKR_VAR_cd_files="$cd_files_json"

#       $TOOLS_PACKER build -force -on-error=ask "$SRCS_TEMPLATE"
#       """,
#       tools = {
#         "PACKER": "//tools:packer",
#         "JQ": "//third_party/jq",
#         "ANSIBLE_PLAYBOOK": "//third_party/ansible|ansible-playbook",
#       },
#       env = {
#         "PKR_VAR_vm_name": f"{name}",
#         "USER": "packer",
#       }
#   )