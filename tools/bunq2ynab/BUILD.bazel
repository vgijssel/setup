load("@rules_python//python:defs.bzl", "py_binary")
load("@rules_task//task:defs.bzl", "cmd", "task", "task_test")
load("//tools/python:defs.bzl", "py_image")
load("@pdm-setup//:requirements.bzl", "requirement")
load("@rules_release//tools:defs.bzl", "publish_github_release", "publish_oci_image", release = "bazel_diff_release")
load("@aspect_bazel_lib//lib:jq.bzl", "jq")

package(default_visibility = ["//visibility:public"])

py_binary(
    name = "list_user_binary",
    srcs = ["@bunq2ynab//:list_user.py"],
    main = "list_user.py",
    deps = [
        "@bunq2ynab//:lib",
        requirement("requests"),
        requirement("pyopenssl"),
    ],
)

py_binary(
    name = "list_budget_binary",
    srcs = ["@bunq2ynab//:list_budget.py"],
    main = "list_budget.py",
    deps = [
        "@bunq2ynab//:lib",
        requirement("requests"),
        requirement("pyopenssl"),
    ],
)

py_binary(
    name = "bunq2ynab_binary",
    srcs = ["@bunq2ynab//:bunq2ynab.py"],
    main = "bunq2ynab.py",
    deps = [
        "@bunq2ynab//:lib",
        requirement("requests"),
        requirement("pyopenssl"),
    ],
)

task(
    name = "list_user",
    cmds = [
        "CONFIG_FILE=$(pwd)/config.json",
        "$OP inject --in-file=$CONFIG_FILE_TPL --out-file=$CONFIG_FILE --force",
        {"defer": "rm -rf $CONFIG_FILE"},
        "$BINARY --config $CONFIG_FILE",
    ],
    env = {
        "BINARY": cmd.executable("list_user_binary"),
        "OP": cmd.executable("//tools/onepassword:op"),
        "CONFIG_FILE_TPL": cmd.file("config-dev.json.tpl"),
    },
)

task_test(
    name = "list_user_test",
    cmds = [
        "export OP_SERVICE_ACCOUNT_TOKEN=$ONEPASSWORD_SERVICE_ACCOUNT_TOKEN_DEV",
        cmd.executable("list_user"),
    ],
)

task(
    name = "list_budget",
    cmds = [
        "CONFIG_FILE=$(pwd)/config.json",
        "$OP inject --in-file=$CONFIG_FILE_TPL --out-file=$CONFIG_FILE --force",
        {"defer": "rm -rf $CONFIG_FILE"},
        "$BINARY --config $CONFIG_FILE",
    ],
    env = {
        "BINARY": cmd.executable("list_budget_binary"),
        "OP": cmd.executable("//tools/onepassword:op"),
        "CONFIG_FILE_TPL": cmd.file("config-dev.json.tpl"),
    },
)

task(
    name = "bunq2ynab",
    cmds = [
        "SETUP_ENV=${SETUP_ENV:-dev}",
        "TIMEOUT=${TIMEOUT:-0}",
        'SETUP_ENV="${SETUP_ENV^^}"',
        "echo Running in env: $SETUP_ENV",
        "CONFIG_FILE=$(pwd)/config.json",
        'CONFIG_TEMPLATE="CONFIG_${SETUP_ENV}_FILE_TPL"',
        "echo Using config template: $CONFIG_TEMPLATE",
        "$OP inject --in-file=${!CONFIG_TEMPLATE} --out-file=$CONFIG_FILE --force",
        {"defer": "rm -rf $CONFIG_FILE"},
        "$BINARY --config $CONFIG_FILE",
        "echo Sleeping for $TIMEOUT to prevent rate limiting",
        "sleep $TIMEOUT",
    ],
    env = {
        "BINARY": cmd.executable("bunq2ynab_binary"),
        "OP": cmd.executable("//tools/onepassword:op"),
        "CONFIG_DEV_FILE_TPL": cmd.file("config-dev.json.tpl"),
        "CONFIG_PROD_FILE_TPL": cmd.file("config-prod.json.tpl"),
    },
)

py_binary(
    name = "generate_oauth_token_binary",
    srcs = ["@bunq2ynab//:generate_oauth_token.py"],
    main = "generate_oauth_token.py",
    deps = [
        "@bunq2ynab//:lib",
        requirement("requests"),
        requirement("pyopenssl"),
    ],
)

task(
    name = "generate_oauth_token",
    cmds = [
        "CLIENT_ID=$($OP read op://vgijssel-prod/bunq2ynab_oauth/username)",
        "CLIENT_SECRET=$($OP read op://vgijssel-prod/bunq2ynab_oauth/credential)",
        "$BINARY --oauth-client-id $CLIENT_ID --oauth-client-secret $CLIENT_SECRET",
    ],
    env = {
        "BINARY": cmd.executable("generate_oauth_token_binary"),
        "OP": cmd.executable("//tools/onepassword:op"),
    },
)

py_image(
    name = "bunq2ynab_image",
    base = "//tools/python:python_base_image_file",
    binary = ":bunq2ynab",
    labels = "container-labels.txt",
    platforms = [
        "//:python_container_linux_amd64",
        "//:python_container_linux_arm64",
    ],
    prefix = "opt/",
)

task(
    name = "bunq2ynab_image_run",
    cmds = [
        cmd.executable("bunq2ynab_image.load"),
        "docker run --rm --env OP_SERVICE_ACCOUNT_TOKEN=$ONEPASSWORD_SERVICE_ACCOUNT_TOKEN_DEV -it --entrypoint='' localhost/bunq2ynab:latest $CLI_ARGS",
    ],
)

task_test(
    name = "bunq2ynab_image_test",
    cmds = [
        cmd.executable("bunq2ynab_image.load"),
        "docker run --rm --env OP_SERVICE_ACCOUNT_TOKEN=$ONEPASSWORD_SERVICE_ACCOUNT_TOKEN_DEV --env TIMEOUT=5 localhost/bunq2ynab:latest",
    ],
    exec_properties = {
        "workload-isolation-type": "firecracker",
        "init-dockerd": "true",
        "recycle-runner": "true",
    },
)

publish_github_release(
    name = "publish_github_release",
    before_cmds = [
        "export OP_SERVICE_ACCOUNT_TOKEN=${ONEPASSWORD_SERVICE_ACCOUNT_TOKEN_PROD:-}",
        "GH_TOKEN=$($OP read op://vgijssel-prod/github-release/credential)",
        "export GH_TOKEN",
    ],
    env = {
        "OP": cmd.executable("//tools/onepassword:op"),
    },
    release = ":release",
)

# Copied from https://github.com/bazel-contrib/rules_oci/blob/375e5dbf3b2c50e83c9df0d0dc16a027984dab77/examples/env_inheritance/BUILD.bazel#L28C1-L34
genrule(
    name = "hash",
    srcs = [":bunq2ynab_image"],
    outs = ["hash.txt"],
    cmd = """
    prefix_to_remove="sha256:"
    digest=$$($(JQ_BIN) -r '.manifests[0].digest' $(location :bunq2ynab_image)/index.json)
    digest_without_prefix=$$(echo $$digest | sed "s/$$prefix_to_remove//")
    echo "dev-$$digest_without_prefix" > $@
    """,
    toolchains = ["@jq_toolchains//:resolved_toolchain"],
)

publish_oci_image(
    name = "publish_oci_image",
    before_cmds = [
        "export OP_SERVICE_ACCOUNT_TOKEN=${ONEPASSWORD_SERVICE_ACCOUNT_TOKEN_PROD:-}",
        "REGISTRY_LOGIN=$($OP read op://vgijssel-prod/github-container-registry/username)",
        "REGISTRY_PASSWORD=$($OP read op://vgijssel-prod/github-container-registry/credential)",
        "docker login ghcr.io --username $REGISTRY_LOGIN --password $REGISTRY_PASSWORD",
    ],
    env = {
        "OP": cmd.executable("//tools/onepassword:op"),
    },
    image = ":bunq2ynab_image",
    remote_tags = "version.txt",
    repository = "ghcr.io/vgijssel/setup/bunq2ynab",
)

publish_oci_image(
    name = "publish_oci_image-dev",
    before_cmds = [
        "export OP_SERVICE_ACCOUNT_TOKEN=${ONEPASSWORD_SERVICE_ACCOUNT_TOKEN_PROD:-}",
        "REGISTRY_LOGIN=$($OP read op://vgijssel-prod/github-container-registry/username)",
        "REGISTRY_PASSWORD=$($OP read op://vgijssel-prod/github-container-registry/credential)",
        "docker login ghcr.io --username $REGISTRY_LOGIN --password $REGISTRY_PASSWORD",
    ],
    env = {
        "OP": cmd.executable("//tools/onepassword:op"),
    },
    image = ":bunq2ynab_image",
    remote_tags = ":hash",
    repository = "ghcr.io/vgijssel/setup/bunq2ynab-dev",
)

release(
    name = "release",
    changelog_file = "CHANGELOG.md",
    publish_cmds = [
        ":publish_oci_image",
        ":publish_github_release",
    ],
    release_name = "bunq2ynab",
    target = ":bunq2ynab_image",
    version_file = "version.txt",
    deps = [
        "@rules_task//:release",
    ],
)
