def terragrunt_toolchain(name:str, hashes:list, version: str, visibility:list = None) -> str:
    return remote_file(
        name = name,
        url = f"https://github.com/gruntwork-io/terragrunt/releases/download/v{version}/terragrunt_{CONFIG.HOSTOS}_{CONFIG.HOSTARCH}",
        hashes = hashes,
        visibility = visibility,
        binary = True,
    )

def terragrunt_root(name:str, toolchain:str, modules:list = [], visibility:list = None, test_only:bool = False) -> str:
    terragrunt_hcl = text_file(
        name = f"terragrunt_hcl",
        out = "terragrunt.hcl",
        content = f"""
        """
    )

    includes = " ".join([f"--terragrunt-include-dir $PLEASE_ROOT/$(out_dir {module})" for module in modules])

    def _create_callable_tf_command(command:str, args:str) -> str:
        if (args == None):
            arg_includes = ""
        else:
            arg_includes = includes

        return sh_cmd(
            name = f"{name}_{command}",
            cmd = f"""
            TERRAGRUNT_BINARY="$PLEASE_ROOT/$(out_location {toolchain})"
            WD="$PLEASE_ROOT/plz-out"
            ARGS="$@"

            # This ensures we are running Terragrunt only on files
            # outputted by the build system.
            cd $WD

            $TERRAGRUNT_BINARY {args} {arg_includes} $ARGS
            """,
            deps = [
                terragrunt_hcl,
                toolchain,
            ] + modules,
            visibility = visibility,
            test_only = test_only,
            paths = [
                "//tools/ssh"
            ]
        )

    _create_callable_tf_command("init", "run-all init")
    _create_callable_tf_command("apply", "run-all apply")
    _create_callable_tf_command("plan", "run-all plan")
    _create_callable_tf_command("destroy", "run-all destroy")
    _create_callable_tf_command("bin", None)

    return f":{name}"

def terragrunt_module(name:str, terraform_root:str, dependencies:list = [], includes:list = [], visibility:list = None, test_only:bool = False) -> str:
    terraform_bin = f"{terraform_root}_bin"

    dependency_string = "\n".join([_generate_dependency(dep) for dep in dependencies])
    include_string = "\n".join([_generate_include(inc) for inc in includes])

    terragrunt_hcl = text_file(
        name = f"terragrunt_hcl",
        out = "terragrunt.hcl",
        content = f"""
        terraform_binary = "${get_env("PLEASE_ROOT")}/$(out_location {terraform_bin})"
        
        {dependency_string}

        {include_string}
        """,
        deps = [
            terraform_bin,
        ] + dependencies + includes,
        visibility = visibility,
        test_only = test_only,
    )

    return filegroup(
        name = name,
        srcs = [
            terragrunt_hcl,
        ],
        visibility = visibility,
        test_only = test_only,
    )

def _generate_dependency(dependency:str) -> str:
    name = dependency

    result = f"""
    dependency "{name}" {{
        config_path = "${get_env("PLEASE_ROOT")}/$(out_dir {dependency})"
        skip_outputs = true
    }}
    """
    return result

def _generate_include(include:str) -> str:
    result = f"""
    include {{
        path = "${get_env("PLEASE_ROOT")}/$(out_location {include})"
    }}
    """
    return result
