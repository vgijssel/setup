JINJA_SCRIPT = '//tools/template:jinja'

# TODO: can we template a file and "carry" the dependencies
# to another rule? So we don't have to specifiy the same dependencies twice?
def template(name:str, subs:dict|list, srcs:list, test_only:bool = False, visibility:list = None, transform:function = None, requires:list = []):
    """
    Generate a file using Jinja2 substitution.
    """

    # Note that deps is an object instead of an array
    # otherwise the iterate closure accessing deps
    # will always access an empty array for whatever reason.
    # Same for template_objects
    deps = {}
    template_objects = {}
    new_srcs = []

    # NOTE: using inline function instead of lambda, because a function
    # can span multiple lines.
    def iterate(sub_key:str, sub_value:str|dict, index:int):
        value_object = _create_value_object(sub_value)
        keys = _create_keys(sub_key, value_object)
        template_object = _create_template_object(keys, value_object)
        template_objects[str(index)] = template_object

        if value_object.is_build_label or value_object.is_file:
            deps[value_object.src] = True

        if transform != None:
            transform_context = {
                "deps": deps,
                "requires": requires,
                "visibility": visibility,
                "test_only": test_only,
                "name": name,
            }
            transform(template_object, transform_context)

    _enumerate(subs, iterate)

    # We are not interested in the values of the dict which are all True
    deps = deps.keys()

    # We are only interested in the values of the dict
    data = json(template_objects.values())

    for src in srcs:
        # The _ and # combination make this rule hidden from build output.
        rule_name = "_" + name + "#" + basename(src)

        new_srcs.append(
            genrule(
                name = rule_name,
                srcs = {
                    "src": src,
                    # TODO: for some reason if we pass deps to deps of genrule only a 
                    # single dep is actually added to the build sandbox. Adding it here
                    # forces each file will be in the sandbox.
                    "deps": deps, 
                },
                outs = [src],
                tools = {
                    "JINJA_SCRIPT": JINJA_SCRIPT,
                },
                cmd = f"""
                DATA='{data}'
                $TOOLS_JINJA_SCRIPT "$SRCS_SRC" "$DATA" "$OUT"
                """,
                visibility = visibility,
                test_only = test_only,
                requires = requires,
            )
        )

    return filegroup(
        name = name,
        srcs = new_srcs,
        visibility = visibility,
        test_only = test_only,
    )

def template_build_label(src:str, has_multiple_outputs:bool = False) -> dict:
    return {
        "is_build_label": True,
        "is_file": False,
        "is_value": False,
        "has_multiple_outputs": has_multiple_outputs,
        "src": src,
        "keys": [],
    }

def template_value(name:str, value:str) -> dict:
    return {
        "is_build_label": False,
        "is_file": False,
        "is_value": True,
        "has_multiple_outputs": False,
        "src": value,
        "keys": [name],
    }

def _is_build_label(string:str) -> bool:
    return string.startswith('//') or string.startswith(':')

def _is_file(string:str) -> bool:
    return string.startswith('/') or string.startswith('./') or string.startswith('../')

def _enumerate(iterable:list|dict, callback:function):
    index = 0

    if isinstance(iterable, dict):
        for key, value in iterable.items():
            callback(key, value, index)
            index += 1
    else:
        for value in iterable:
            callback(None, value, index)
            index += 1

def _create_value_object(value:str|dict) -> dict:
    value_object = None
    src = None

    if isinstance(value, dict):
        value_object = value

        if "src" not in value_object:
            fail("Need to pass at least source when value is a dict.")

        src = value_object.src
    else:
        value_object = { "src": value }
        src = value

    if "is_build_label" not in value_object:
        value_object["is_build_label"] = _is_build_label(src)

    if "is_file" not in value_object:
        value_object["is_file"] = _is_file(src)

    if "is_value" not in value_object:
        value_object["is_value"] = not value_object["is_build_label"] and not value_object["is_file"]
    
    if "has_multiple_outputs" not in value_object:
        value_object["has_multiple_outputs"] = False

    if "keys" not in value_object:
        value_object["keys"] = []
    
    return value_object

def _create_keys(key:str, value_object:dict) -> list:
    keys = value_object.keys

    if key != None:
        keys.append(key)

    if value_object.is_build_label:
        full_label = _full_build_label(value_object.src)
        keys.append(full_label)

        target, label = decompose(full_label)
        keys.append(label)
        keys.append(f":{label}")

    elif value_object.is_file:
        keys.append(value_object.src)
        keys.append(basename(value_object.src))

    else:
        keys.append(value_object.src)

    return keys

def _create_template_object(keys:list, value_object:dict) -> dict:
    template_object = {}
    template_object["keys"] = keys
    template_object["values"] = {}
    values = template_object.values

    if value_object.is_build_label or value_object.is_file:
        src = value_object.src

        if value_object.has_multiple_outputs:
            values["out_location"] = { "type": "string", "value": f"$(out_dir {src})" }
            values["location"] = { "type": "string", "value": f"$(dir {src})" }

        else:
            values["out_location"] = { "type": "string", "value": f"$(out_location {src})" }
            values["location"] = { "type": "string", "value": f"$(location {src})" }
            values["content"] = { "type": "file", "value": f"$(location {src})" }

    else:
        values["value"] = { "type": "string", "value": value_object.src }


    if value_object.is_build_label:
        values["build_label"] = { "type": "string", "value": _full_build_label(value_object.src) }

    values["original_value"] = { "type": "string", "value": value_object.src }
    values["is_build_label"] = { "type": "boolean", "value": value_object.is_build_label }
    values["is_file"] = { "type": "boolean", "value": value_object.is_file }
    values["is_value"] = { "type": "boolean", "value": value_object.is_value }
    values["has_multiple_outputs"] = { "type": "boolean", "value": value_object.has_multiple_outputs }

    return template_object

def _full_build_label(label:str) -> str:
    # TODO: Bug that canonicalise does not work with | in the build label
    # So we are removing it here and adding it back later
    before, sep, after = label.partition("|")

    full_label = canonicalise(before)

    # here we glue back the | and the rest of the string
    return f"{full_label}{sep}{after}"

