---
- hosts: all
  connection: local

  vars:
    current_user: "{{ ansible_user_id }}"
    # Setting the shell executable to ZSH shipped with macos here
    # to make sure the user environment is loaded through ~/.zshenv
    # when using shell and command modules. Note we cannot use
    # the brew ZSH binary as it might not be installed yet.
    ansible_shell_executable: /bin/zsh

  vars_files:
    - config.yml

  tasks:
    - name: Running playbook as user
      debug:
        msg: "Running as user: {{ current_user }}"

    - name: Ensure proper permissions for brew services
      tags: ["homebrew"]
      become: yes
      ansible.builtin.file:
        path: "{{ lookup('env','HOME') }}/Library/LaunchAgents"
        owner: maarten
        group: staff
        mode: "0755"

    # Update brew before to fix this issue https://github.com/Homebrew/homebrew-bundle/issues/751
    - name: Update Homebrew
      tags: ["homebrew"]
      command: brew update --preinstall

    - name: Installing Homebrew packages using Brewfile
      tags: ["homebrew"]
      command: brew bundle install
      args:
        chdir: "{{ playbook_dir }}"

    - name: Fetch dns-heaven install script
      tags: ["dns-heaven"]
      register: dns_heaven_install_script
      uri:
        url: https://git.io/fix-my-dns-plz
        return_content: yes

    - name: Install dns-heaven
      tags: ["dns-heaven"]
      become: yes
      shell: "{{ dns_heaven_install_script.content }}"

    - name: Read DEVELOPMENT_DIR
      tags: ["files"]
      set_fact:
        development_dir: "{{ lookup('env', 'DEVELOPMENT_DIR') | not_falsy }}"

    - name: Ensure rcm is installed
      tags: ["files"]
      homebrew:
        name: rcm
        state: present

    - name: Symlink all dotfiles
      tags: ["files"]
      command: rcup -vf
      register: rcm
      environment:
        RCRC: "{{ playbook_dir }}/files/rcrc"

    - name: Print rcm
      tags: ["files"]
      debug:
        msg: "{{ rcm.stdout_lines }}"

    - name: Copy maxfiles service
      tags: ["macos"]
      become: yes
      template:
        src: limit.maxfiles.plist.j2
        dest: /Library/LaunchDaemons/limit.maxfiles.plist

    - name: Run maxfiles service
      tags: ["macos"]
      become: yes
      community.general.launchd:
        name: limit.maxfiles
        enabled: yes
        state: restarted

    - name: Apply macos customisations
      tags: ["macos"]
      command: "{{playbook_dir}}/macos_customisations.sh"

    - name: Get GitHub authorized key
      tags: ["git"]
      command: ssh-keyscan -t rsa github.com
      register: github_key

    - name: Add GitHub authorized key to known hosts
      tags: ["git"]
      known_hosts:
        hash_host: false
        name: github.com
        key: "{{ github_key.stdout }}"
        path: "{{ lookup('env','HOME') }}/.ssh/known_hosts"
        state: present

    - name: Ensure mr is installed
      tags: ["git"]
      homebrew:
        name: mr
        state: present

    - name: Clone all repositories
      tags: ["git"]
      command: mr checkout -j 8
      args:
        chdir: "{{ lookup('env','HOME') }}"

    - name: Ensure zsh and dependencies are installed
      tags: ["shell"]
      homebrew:
        name: "{{ item }}"
        state: present
      loop:
        - zsh
        - fzf
        - direnv
        - gpg2

    - name: Set the ZSH version from brew
      tags: ["shell"]
      become: yes
      user:
        name: "{{ current_user }}"
        shell: /usr/local/bin/zsh

    - name: Ensure proper permissions for ZSH
      tags: ["shell"]
      become: yes
      file:
        path: /usr/local/share/zsh
        recurse: yes
        mode: "0755"

    - name: Install ZPlugin
      shell: "source {{ lookup('env','HOME') }}/.zshrc"
      args:
        executable: /usr/local/bin/zsh
      tags: ["shell"]

    - name: Check shell env
      command: env
      tags: ["shell"]
      register: check_shell_env

    - name: Print shell env
      debug:
        msg: "{{ check_shell_env.stdout_lines }}"
      tags: ["shell"]

    - name: Ensure gpg is installed to verify nodejs archives
      tags: ["lang"]
      homebrew:
        name: gpg2
        state: present

    - name: List ASDF plugins
      tags: ["lang"]
      shell: cat ./files/tool-versions | awk '{print $1;}'
      register: asdf_plugins_result
      failed_when:
        - asdf_plugins_result.rc != 0 or asdf_plugins_result.stderr_lines | length > 0

    - name: Set language facts
      tags: ["lang"]
      set_fact:
        languages: "{{ asdf_plugins_result.stdout_lines }}"

    - name: Install ASDF plugins
      command: "asdf plugin add {{ item }}"
      tags: ["lang"]
      loop: "{{ languages }}"
      register: result
      failed_when:
        - result.rc != 0
        - '"already added" not in result.stderr'

    - name: Update ASDF plugins
      command: "asdf plugin update {{ item }}"
      loop: "{{ languages }}"
      tags: ["lang"]

    - name: Install ASDF languages
      tags: ["lang"]
      command: "asdf install"

    - name: Install Nodejs packages
      tags: ["lang", "nodejs"]
      npm:
        name: "{{ item[0].name }}"
        state: "{{ 'present' if (item[0].version | default(None)) else 'latest' }}"
        global: yes
        version: "{{ item[0].version | default(None) }}"
      loop:
        - "{{ nodejs.packages }}"

    - name: Install Ruby gems
      tags: ["lang", "ruby"]
      gem:
        name: "{{ item[0].name }}"
        state: "{{ 'present' if (item[0].version | default(None)) else 'latest' }}"
        build_flags: "{{ item[0].build_flags | default(None) }}"
        user_install: false
        version: "{{ item[0].version | default(None) }}"
      with_nested:
        - "{{ ruby.gems }}"

    # - name: Install solargraph documentation
    #   tags: ["lang", "ruby", "solargraph"]
    #   environment:
    #     ASDF_RUBY_VERSION: "{{ item.version }}"
    #   command: solargraph download-core {{ item.solargraph }}
    #   changed_when: False
    #   loop: "{{ languages.ruby.versions }}"

    # - name: Generate YARD documentation for all Ruby versions
    #   tags: ["lang", "ruby", "solargraph"]
    #   environment:
    #     ASDF_RUBY_VERSION: "{{ item }}"
    #   command: yard gems
    #   changed_when: False
    #   loop: "{{ languages.ruby.versions | map(attribute='version') | list }}"

    - name: Reshim asdf
      tags: ["lang"]
      command: asdf reshim
      changed_when: False
      environment:

    # - name: "Sync secrets stored in 1password"
    #   tags: ['secrets']
    #   command: op_sync sync
    #   register: op_sync
    #   changed_when: (op_sync.stdout | from_json)['total_updates'] > 0

    # - name: "Restart gpg-agent"
    #   tags: ['secrets']
    #   command: gpgconf --reload gpg-agent
