---
- name: "Provision Hypervisor"
  hosts: all
  debugger: on_failed
  gather_facts: true
  environment:
    OP_CONNECT_HOST: "{{ op_connect_host }}"
    OP_CONNECT_TOKEN: "{{ op_connect_token }}"
    OP_VAULT_ID: "{{ op_vault_id }}"
  collections:
    - onepassword.connect
  tasks:
    - name: Install Network utilities
      tags: ["network"]
      package:
        name: "{{ item }}"
        state: present
      loop:
        - ebtables
        - bridge-utils
        - net-tools
        - iptables-persistent
      become: yes

    - name: Copy network bridge config
      tags: ["network"]
      ansible.builtin.template:
        src: 50-network-bridge.yaml.j2
        dest: /etc/netplan/50-network-bridge.yaml
        owner: root
        group: root
        mode: "0644"
      become: yes

    - name: Compile network config
      tags: ["network"]
      command: netplan generate
      become: yes

    # Make the task async to avoid hanging Ansible because of ip address change
    # https://stackoverflow.com/questions/55471178/changing-ip-address-restarting-netplan
    - name: Apply network config
      tags: ["network"]
      command: netplan apply
      become: yes
      async: 30
      poll: 5

    - name: Enable IP forwarding
      tags: ["network"]
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        sysctl_set: yes
      become: yes

    # https://forum.opennebula.io/t/virtual-network-connectiviy-and-iptables/9159
    # https://forum.opennebula.io/t/vm-can-only-be-pinged-from-node-solved/3196/10
    # https://serverfault.com/questions/845923/bridge-interface-for-kvm-vms-with-access-to-internet
    # Added these two iptable rules to allow vms to connect to the internet
    # And for the LAN to be able to reach the VMS
    # iptables -S
    # iptables --table nat --append POSTROUTING --out-interface eno1 -j MASQUERADE
    # iptables --insert FORWARD --in-interface br0 -j ACCEPT
    # Save the iptables rules using iptables-save > /etc/iptables/rules.v4
    - name: Copy iptables rules
      tags: ["network"]
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: "0644"
      become: yes
      loop:
        - { src: "rules.v4.j2", dest: "/etc/iptables/rules.v4" }
        - { src: "rules.v6.j2", dest: "/etc/iptables/rules.v6" }

    - name: Apply iptables
      tags: ["network"]
      shell: "{{ item.command }} < {{ item.rules }}"
      loop:
        - { command: "iptables-restore", rules: "/etc/iptables/rules.v4" }
        - { command: "ip6tables-restore", rules: "/etc/iptables/rules.v6" }
      become: yes

    - name: Add latest ZFS repository
      tags: ["storage"]
      ansible.builtin.apt_repository:
        repo: ppa:jonathonf/zfs
      become: yes

    # When upgrading ZFS don't forget to remove mount points?
    # https://launchpad.net/~jonathonf/+archive/ubuntu/zfs
    - name: Install storage utilities
      tags: ["storage"]
      package:
        name: "{{ item }}"
        state: present
      loop:
        - zfs-dkms
        - zfs-test
        - fio
        - fdisk
        - sysstat
        - smartmontools
        - nfs-kernel-server
        - nfs-common
      become: yes

    - name: Assume existence of ZFS pool new_data
      tags: ["storage"]
      command: zpool status new_data
      changed_when: False

    - name: Configure ZFS data volume
      tags: ["storage"]
      community.general.zfs:
        name: new_data
        state: present
        extra_zfs_properties:
          dedup: "off"
          sharenfs: "off"
          compression: "lz4"
          sync: "disabled"
      become: yes

    - name: Create ZFS volume for OpenNebula datastores
      tags: ["storage"]
      community.general.zfs:
        name: new_data/opennebula_datastores
        state: present
        extra_zfs_properties:
          mountpoint: /var/lib/one/datastores
      become: yes

    - name: Ensure OpenNebula can read/write to the datastores
      tags: ["storage"]
      ansible.builtin.file:
        path: /var/lib/one/datastores
        state: directory
        recurse: yes
        owner: oneadmin
        group: oneadmin
      become: yes

    - name: Create ZFS NFS volumes for media
      tags: ["storage"]
      community.general.zfs:
        name: new_data/media
        state: present
        extra_zfs_properties:
          sharenfs: "rw=@192.168.1.0/24,no_root_squash,no_subtree_check"
      become: yes

    # cat /etc/exports.d/zfs.exports
    # mount -v -t nfs hypervisor:/data/apps/radarr /tmp/mnt
    - name: Create ZFS NFS volumes for apps
      tags: ["storage"]
      community.general.zfs:
        name: new_data/apps/{{ item }}
        state: present
        extra_zfs_properties:
          sharenfs: "rw=@192.168.1.0/24,no_root_squash,no_subtree_check"
      become: yes
      loop:
        - radarr
        - plex

    - name: Get DEB architecture
      tags: ["docker"]
      shell: dpkg --print-architecture
      register: architecture

    - tags: ["docker"]
      set_fact:
        ubuntu_release: "{{ hostvars[inventory_hostname].ansible_distribution_release }}"
        architecture: "{{ architecture.stdout }}"

    # https://docs.docker.com/engine/install/ubuntu/
    - name: Install docker dependencies
      tags: ["docker"]
      package:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
      become: yes

    - name: Add Docker GPG apt Key
      tags: ["docker"]
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      become: yes

    - name: Add Docker Repository
      tags: ["docker"]
      apt_repository:
        repo: "deb [arch={{ architecture }}] https://download.docker.com/linux/ubuntu {{ ubuntu_release }} stable"
        state: present
      become: yes

    - name: Update apt
      tags: ["docker"]
      apt:
        update_cache: true
      become: yes

    - name: Install docker-ce
      tags: ["docker"]
      apt:
        state: latest
        name: "{{ item }}"
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
      become: yes

    - name: Install pip
      tags: ["docker"]
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - python3-pip
      become: yes

    - name: Install Ansible docker dependencies
      tags: ["docker"]
      pip:
        name: "{{ item.name }}"
        version: "{{ item.version }}"
        state: present
      with_items:
        - { name: docker, version: 5.0.3 }
      become: yes

    - name: Install OpenNebula dependencies
      tags: ["opennebula"]
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - gnupg
        - wget
        - apt-transport-https
      become: yes

    # https://docs.opennebula.io/6.0/installation_and_configuration/frontend_installation/opennebula_repository_configuration.html#repositories-ce
    - name: Add OpenNebula signing key
      tags: ["opennebula"]
      ansible.builtin.apt_key:
        url: https://downloads.opennebula.io/repo/repo.key
        state: present
      become: yes

    - name: Add OpenNebula repository
      tags: ["opennebula"]
      ansible.builtin.apt_repository:
        repo: deb https://downloads.opennebula.io/repo/6.0/Ubuntu/20.04 stable opennebula
        state: present
        filename: opennebula
      become: yes

    # https://docs.opennebula.io/6.0/installation_and_configuration/frontend_installation/install.html
    - name: Install OpenNebula frontend
      tags: ["opennebula"]
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - opennebula
        - opennebula-sunstone
        - opennebula-fireedge
        - opennebula-gate
        - opennebula-flow
        - opennebula-provision
      become: yes

    - name: Add OpenNebula as docker user
      tags: ["opennebula"]
      ansible.builtin.user:
        name: oneadmin
        groups: docker
        append: yes
      become: yes

    - tags: ["opennebula"]
      set_fact:
        mysql_user: oneadmin
        mysql_database: "opennebula"

    # https://docs.opennebula.io/6.0/installation_and_configuration/frontend_installation/database.html#database-setup
    - name: Create mysql Secret
      tags: ["opennebula"]
      delegate_to: localhost
      onepassword.connect.generic_item:
        title: OpenNebula MySQL
        state: present
        fields:
          - label: username
            value: "{{ mysql_user }}"
          - label: password
            field_type: concealed
            generate_value: on_create
            generator_recipe:
              length: 32
              include_letters: yes
              include_digits: yes
              include_symbols: no
      no_log: true
      register: result_mysql_secret

    - tags: ["opennebula"]
      set_fact:
        mysql_password: "{{ result_mysql_secret.op_item.fields.password.value }}"

    - name: Setup mysql database
      tags: ["opennebula"]
      become: yes
      docker_container:
        name: opennebula_mysql
        image: mysql:8.0.27
        recreate: yes
        restart_policy: always
        keep_volumes: yes
        container_default_behavior: no_defaults
        ports:
          - "127.0.0.1:3306:3306"
        volumes:
          - /var/lib/opennebula_mysql:/var/lib/mysql
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_password }}"
          MYSQL_PASSWORD: "{{ mysql_password }}"
          MYSQL_USER: "{{ mysql_user }}"
          MYSQL_DATABASE: "{{ mysql_database }}"

    - name: Wait until MySQL is ready
      tags: ["opennebula"]
      command: "docker exec opennebula_mysql mysqladmin -u {{ mysql_user }} -p{{ mysql_password }} ping"
      retries: 10
      delay: 10
      register: result
      until: result.rc == 0
      no_log: true
      become: yes

    - tags: ["opennebula"]
      set_fact:
        hypervisor_hostname: "{{ inventory_hostname }}"

    - name: Setup OpenNebula configuration
      tags: ["opennebula"]
      ansible.builtin.template:
        src: oned.conf.j2
        dest: /etc/one/oned.conf
        owner: root
        group: oneadmin
        mode: "0640"
      become: yes

    - name: Create oneadmin Secret
      tags: ["opennebula"]
      delegate_to: localhost
      onepassword.connect.generic_item:
        category: login
        urls:
          - "http://{{ inventory_hostname }}:9869"
        title: OpenNebula oneadmin
        state: present
        fields:
          - label: username
            value: oneadmin
          - label: password
            field_type: concealed
            generate_value: on_create
            generator_recipe:
              length: 32
              include_letters: yes
              include_digits: yes
              include_symbols: no
      no_log: true
      register: result_oneadmin_secret

    - tags: ["opennebula"]
      set_fact:
        oneadmin_password: "{{ result_oneadmin_secret.op_item.fields.password.value }}"

    - name: Set OpenNebula oneadmin password
      tags: ["opennebula"]
      ansible.builtin.copy:
        content: "oneadmin:{{ oneadmin_password }}"
        dest: /var/lib/one/.one/one_auth
        owner: oneadmin
        group: oneadmin
        mode: "0600"
      become: yes

    - name: Setup OpenNebula FireEdge configuration
      tags: ["opennebula"]
      ansible.builtin.template:
        src: sunstone-server.conf.j2
        dest: /etc/one/sunstone-server.conf
        owner: root
        group: oneadmin
        mode: "0640"
      become: yes

    - name: Setup OpenNebula OneGate configuration
      tags: ["opennebula"]
      ansible.builtin.template:
        src: onegate-server.conf.j2
        dest: /etc/one/onegate-server.conf
        owner: root
        group: oneadmin
        mode: "0640"
      become: yes

    - name: Setup OpenNebula networking
      tags: ["opennebula"]
      ansible.builtin.template:
        src: OpenNebulaNetwork.conf.j2
        dest: /var/lib/one/remotes/etc/vnm/OpenNebulaNetwork.conf
        owner: oneadmin
        group: oneadmin
        mode: "0640"
      become: yes

    - name: Setup OpenNebula onevm config
      tags: ["opennebula"]
      ansible.builtin.template:
        src: onevm.yaml.j2
        dest: /etc/one/cli/onevm.yaml
        owner: root
        group: root
        mode: "0644"
      become: yes

    - name: Make sure OpenNebula is started
      tags: ["opennebula"]
      ansible.builtin.systemd:
        state: restarted
        enabled: yes
        name: "{{ item }}"
      loop:
        - opennebula
        - opennebula-sunstone
        - opennebula-fireedge
        - opennebula-gate
        - opennebula-flow
      become: yes

    # https://docs.opennebula.io/6.0/open_cluster_deployment/firecracker_node/firecracker_node_installation.html
    - name: Install OpenNebula Firecracker Node
      tags: ["opennebula-firecracker"]
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop:
        - opennebula-node-firecracker
      become: yes

    - tags: ["opennebula-firecracker"]
      set_fact:
        hypervisor_hostname: "{{ inventory_hostname }}"

    - name: Check if node is already joined
      tags: ["opennebula-firecracker"]
      command: "onehost show {{ hypervisor_hostname }}"
      ignore_errors: yes
      become: yes
      register: result
      changed_when: False

    - name: Add Firecracker Node to frontend
      tags: ["opennebula-firecracker"]
      command: "onehost create {{ hypervisor_hostname }} -i firecracker -v firecracker"
      become: yes
      when: "result.rc != 0"

    # https://docs.opennebula.io/6.0/open_cluster_deployment/firecracker_node/firecracker_driver.html#networking
    - name: Copy Firecracker networking scripts to bridge networking
      tags: ["opennebula-firecracker"]
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        remote_src: yes
        owner: oneadmin
        group: oneadmin
        mode: "0750"
      loop:
        - {
            src: "/var/lib/one/remotes/vnm/hooks/pre/firecracker",
            dest: "/var/lib/one/remotes/vnm/bridge/pre.d/firecracker",
          }
        - {
            src: "/var/lib/one/remotes/vnm/hooks/clean/firecracker",
            dest: "/var/lib/one/remotes/vnm/bridge/clean.d/firecracker",
          }
      become: yes

    # https://github.com/firecracker-microvm/firecracker/blob/main/docs/getting-started.md#appendix-a-setting-up-kvm-access
    - name: Add oneadmin as kvm user
      tags: ["opennebula-firecracker"]
      ansible.builtin.user:
        name: oneadmin
        groups: kvm
        append: yes
      become: yes
