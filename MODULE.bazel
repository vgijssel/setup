"""
All the dependencies for setup.
"""

module(
    name = "setup",
    repo_name = "setup",
    version = "1.0",
)

# It's important that this toolchain is registered before the toolchains from rules_python
# so this one can be picked when we run Python inside a container.
register_toolchains(
    "//tools/python:python_container_py_toolchain",
)

# ------------------------------------ platforms ------------------------------------ #
bazel_dep(
    name = "platforms",
    version = "0.0.8",
)

# ------------------------------------ rules_skylib ------------------------------------ #
bazel_dep(
    name = "bazel_skylib",
    version = "1.4.2",
)

# ------------------------------------ aspect_bazel_lib ------------------------------------ #
bazel_dep(
    name = "aspect_bazel_lib",
    version = "2.0.3",
)

bazel_lib_toolchains = use_extension("@aspect_bazel_lib//lib:extensions.bzl", "toolchains")

bazel_lib_toolchains.jq()

use_repo(bazel_lib_toolchains, "jq_toolchains")

# ------------------------------------ rules_pkg ------------------------------------ #
bazel_dep(
    name = "rules_pkg",
    version = "0.9.1",
)

# ------------------------------------ rules_task ------------------------------------ #
bazel_dep(
    name = "rules_task",
    version = "0.0.0",
)

local_path_override(
    module_name = "rules_task",
    path = "./rules/rules_task",
)

# ------------------------------------ rules_python ------------------------------------ #
bazel_dep(
    name = "rules_python",
    version = "0.29.0",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = "3.11.5",
)

use_repo(python, "python_versions")

# ------------------------------------ rules_pycross ------------------------------------ #
bazel_dep(name = "rules_pycross", version = "0.5.2")

environments = use_extension("@rules_pycross//pycross/extensions:environments.bzl", "environments")

use_repo(environments, "pycross_environments")

lock_import = use_extension("@rules_pycross//pycross/extensions:lock_import.bzl", "lock_import")

lock_import.import_pdm(
    lock_file = "//:pdm.lock",
    project_file = "//:pyproject.toml",
    repo = "pdm-setup",
)

lock_repos = use_extension("@rules_pycross//pycross/extensions:lock_repos.bzl", "lock_repos")

use_repo(lock_repos, "pdm-setup")

lock_file = use_extension("@rules_pycross//pycross/extensions:lock_file.bzl", "lock_file")

lock_file.instantiate(
    name = "pdm_lock_file",
    lock_file = "//:pdm_lock.bzl",
)

use_repo(lock_file, "pdm_lock_file")

# ------------------------------------ rules_oci ------------------------------------ #
bazel_dep(
    name = "rules_oci",
    version = "1.4.3",
)

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

oci.pull(
    name = "ubuntu_base",
    digest = "sha256:dfd64a3b4296d8c9b62aa3309984f8620b98d87e47492599ee20739e8eb54fbf",
    image = "index.docker.io/library/ubuntu",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)

use_repo(oci, "ubuntu_base")

# ------------------------------------ rules_release ------------------------------------ #
bazel_dep(
    name = "rules_release",
    version = "0.0.0",
)

local_path_override(
    module_name = "rules_release",
    path = "./rules/rules_release",
)
