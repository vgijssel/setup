"""
All the dependencies for setup.
"""

module(
    name = "setup",
    repo_name = "setup",
    version = "1.0",
)

# It's important that this toolchain is registered before the toolchains from rules_python
# so this one can be picked when we run Python inside a container.
register_toolchains(
    "//tools/python:python_container_py_toolchain",
)

# ------------------------------------ platforms ------------------------------------ #
bazel_dep(
    name = "platforms",
    version = "0.0.8",
)

# ------------------------------------ rules_skylib ------------------------------------ #
bazel_dep(
    name = "bazel_skylib",
    version = "1.4.2",
)

# ------------------------------------ aspect_bazel_lib ------------------------------------ #
bazel_dep(
    name = "aspect_bazel_lib",
    version = "2.0.3",
)

bazel_lib_toolchains = use_extension("@aspect_bazel_lib//lib:extensions.bzl", "toolchains")

bazel_lib_toolchains.jq()

use_repo(bazel_lib_toolchains, "jq_toolchains")

# ------------------------------------ rules_pkg ------------------------------------ #
bazel_dep(
    name = "rules_pkg",
    version = "0.9.1",
)

# ------------------------------------ rules_task ------------------------------------ #
bazel_dep(
    name = "rules_task",
    version = "0.0.0",
)

local_path_override(
    module_name = "rules_task",
    path = "./rules/rules_task",
)

# ------------------------------------ rules_python ------------------------------------ #

PYTHON_VERSION = "3.11"

py_underscore_version = PYTHON_VERSION.replace(".", "_")

bazel_dep(
    name = "rules_python",
    version = "0.29.0",
)

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

python.toolchain(
    configure_coverage_tool = True,
    is_default = True,
    python_version = PYTHON_VERSION,
)

use_repo(
    python,
    "python_%s" % py_underscore_version,
    "python_%s_host" % py_underscore_version,
    "python_versions",
    "pythons_hub",
)

# ------------------------------------ rules_pycross ------------------------------------ #
bazel_dep(name = "rules_pycross", version = "0.5.2")

# TODO: can be removed once versiojn 0.5.3 is released
local_path_override(
    module_name = "rules_pycross",
    path = "./rules/rules_pycross",
)

pycross = use_extension("@rules_pycross//pycross/extensions:pycross.bzl", "pycross")

# Copied this setup from https://github.com/jvolkman/rules_pycross/blob/3d4b8a9d932207ba09ca56858f3352dd1f2557a4/MODULE.bazel#L33
pycross.configure_environments()

pycross.configure_interpreter(
    python_defs_file = "@python_%s//:defs.bzl" % py_underscore_version,
    python_interpreter_target = "@python_%s_host//:python" % py_underscore_version,
)

pycross.configure_toolchains()

environments = use_extension("@rules_pycross//pycross/extensions:environments.bzl", "environments")

environments.create_for_python_toolchains(
    name = "smoke_environments",
    macos_version = "14.0",
    platforms = [
        "aarch64-apple-darwin",
        "x86_64-apple-darwin",
        "aarch64-unknown-linux-gnu",
        "x86_64-unknown-linux-gnu",
    ],
    python_versions = [
        PYTHON_VERSION,
    ],
)

use_repo(environments, "smoke_environments")

use_repo(environments, "pycross_environments")

lock_import = use_extension("@rules_pycross//pycross/extensions:lock_import.bzl", "lock_import")

lock_import.import_pdm(
    default_alias_single_version = True,
    local_wheels = [
        "//wheels:ulid_transform-0.9.0-cp311-cp311-macosx_14_0_arm64.whl",
        "//wheels:bluetooth_data_tools-1.19.0-cp311-cp311-macosx_14_0_arm64.whl",
        "//wheels:dbus_fast-2.21.1-cp311-cp311-macosx_14_0_arm64.whl",
        "//wheels:zlib_ng-0.4.0-cp311-cp311-macosx_11_0_arm64.whl",
        "//wheels:habluetooth-2.4.0-cp311-cp311-macosx_14_0_arm64.whl",
    ],
    lock_file = "//:pdm.lock",
    project_file = "//:pyproject.toml",
    repo = "pdm-setup",
    target_environments = [
        "@smoke_environments//:environments",
    ],
)

lock_import.package(
    name = "ulid-transform",
    build_dependencies = [
        "wheel",
        "setuptools",
        "poetry-core",
    ],
    repo = "pdm-setup",
)

lock_import.package(
    name = "python-slugify",
    build_dependencies = [
        "wheel",
        "setuptools",
    ],
    repo = "pdm-setup",
)

lock_import.package(
    name = "mock-open",
    build_dependencies = [
        "wheel",
        "setuptools",
    ],
    repo = "pdm-setup",
)

lock_import.package(
    name = "lru-dict",
    build_dependencies = [
        "wheel",
        "setuptools",
        "poetry-core",
    ],
    repo = "pdm-setup",
)

lock_import.package(
    name = "pytest-test-groups",
    build_dependencies = [
        "wheel",
        "setuptools",
    ],
    repo = "pdm-setup",
)

lock_import.package(
    name = "paho-mqtt",
    build_dependencies = [
        "wheel",
        "setuptools",
    ],
    repo = "pdm-setup",
)

lock_import.package(
    name = "home-assistant-bluetooth",
    build_dependencies = [
        "wheel",
        "setuptools",
        "poetry-core",
    ],
    repo = "pdm-setup",
)

lock_import.package(
    name = "zlib-ng",
    build_dependencies = [
        "wheel",
        "setuptools",
    ],
    repo = "pdm-setup",
)

lock_import.package(
    name = "bluetooth-data-tools",
    build_dependencies = [
        "wheel",
        "setuptools",
        "poetry-core",
    ],
    repo = "pdm-setup",
)

lock_import.package(
    name = "pyric",
    build_dependencies = [
        "wheel",
        "setuptools",
    ],
    repo = "pdm-setup",
)

lock_import.package(
    name = "dbus-fast",
    build_dependencies = [
        "wheel",
        "setuptools",
        "poetry-core",
    ],
    repo = "pdm-setup",
)

lock_import.package(
    name = "habluetooth",
    build_dependencies = [
        "wheel",
        "setuptools",
        "poetry-core",
    ],
    repo = "pdm-setup",
)

lock_repos = use_extension("@rules_pycross//pycross/extensions:lock_repos.bzl", "lock_repos")

use_repo(lock_repos, "pdm-setup")

# ------------------------------------ rules_oci ------------------------------------ #
bazel_dep(
    name = "rules_oci",
    version = "1.4.3",
)

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

oci.pull(
    name = "ubuntu_base",
    digest = "sha256:dfd64a3b4296d8c9b62aa3309984f8620b98d87e47492599ee20739e8eb54fbf",
    image = "index.docker.io/library/ubuntu",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)

use_repo(oci, "ubuntu_base")

# ------------------------------------ rules_release ------------------------------------ #
bazel_dep(
    name = "rules_release",
    version = "0.0.0",
)

local_path_override(
    module_name = "rules_release",
    path = "./rules/rules_release",
)
