load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@rules_task//tools:defs.bzl", "compile_pip_requirements")
load("@rules_task//:defs.bzl", "cmd", "task", "task_test")
load("@bazel_tools//tools/python:toolchain.bzl", "py_runtime_pair")
load("//tools/python:defs.bzl", "py_image")

package(default_visibility = ["//visibility:public"])

exports_files(["WORKSPACE"])

bool_flag(
    name = "setup_debug_flag",
    build_setting_default = False,
)

config_setting(
    name = "setup_debug",
    flag_values = {
        "//:setup_debug_flag": "True",
    },
)

config_setting(
    name = "is_linux_amd64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "is_linux_arm64",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "is_darwin_arm64",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:macos",
    ],
)

compile_pip_requirements(
    name = "requirements",
    extra_args = [
        "--allow-unsafe",
    ],
    hidden_args = [
        "--verbose",
    ],
    requirements_in = "requirements.in",
    requirements_txt = "requirements.txt",
)

constraint_setting(name = "shine_containerized")

constraint_value(
    name = "shine_run_in_container",
    constraint_setting = ":shine_containerized",
)

platform(
    name = "shine_platform",
    constraint_values = [
        ":shine_run_in_container",
    ],
)

py_runtime(
    name = "shine_container_py2_runtime",
    interpreter_path = "/usr/bin/python3",
    python_version = "PY2",
)

py_runtime(
    name = "shine_container_py3_runtime",
    interpreter_path = "/usr/bin/python3",
    python_version = "PY3",
)

py_runtime_pair(
    name = "shine_container_py_runtime_pair",
    py2_runtime = ":shine_container_py2_runtime",
    py3_runtime = ":shine_container_py3_runtime",
)

toolchain(
    name = "shine_container_py_toolchain",
    target_compatible_with = [
        ":shine_run_in_container",
    ],
    toolchain = ":shine_container_py_runtime_pair",
    toolchain_type = "@bazel_tools//tools/python:toolchain_type",
)

sh_binary(
    name = "setup_ci",
    srcs = [
        "setup_ci.sh",
    ],
)

task(
    name = "hello_world",
    cmds = [
        "echo 'hello world'",
    ],
)

py_image(
    name = "hello_world_image",
    base = "@python38_base_image//:image.tar.gz",
    binary = ":hello_world",
    prefix = "opt/",
    target_platform = ":shine_platform",
)

task(
    name = "hello_world_image_run",
    cmds = [
        "docker load < $TARBALL",
        "docker run --rm -it --entrypoint='' hello_world:latest  $CLI_ARGS",
    ],
    env = {
        "TARBALL": cmd.file(":hello_world_tarball"),
    },
)

task_test(
    name = "hello_world_test",
    cmds = [
        "docker load < $TARBALL",
        "docker run --rm --entrypoint='' hello_world:latest find /opt",
        "docker run --rm  hello_world:latest",
    ],
    env = {
        "TARBALL": cmd.file(":hello_world_tarball"),
    },
    exec_properties = {
        "workload-isolation-type": "firecracker",
        "init-dockerd": "true",
        "recycle-runner": "true",
    },
)
