load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@rules_task//tools:defs.bzl", "compile_pip_requirements")
load("@rules_task//:defs.bzl", "cmd", "task")

package(default_visibility = ["//visibility:public"])

exports_files(["WORKSPACE"])

bool_flag(
    name = "setup_debug_flag",
    build_setting_default = False,
)

config_setting(
    name = "setup_debug",
    flag_values = {
        "//:setup_debug_flag": "True",
    },
)

config_setting(
    name = "is_linux_amd64",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "is_linux_arm64",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
)

config_setting(
    name = "is_darwin_arm64",
    constraint_values = [
        "@platforms//cpu:aarch64",
        "@platforms//os:macos",
    ],
)

compile_pip_requirements(
    name = "requirements",
    extra_args = [
        "--allow-unsafe",
    ],
    hidden_args = [
        "--verbose",
    ],
    requirements_in = "requirements.in",
    requirements_txt = "requirements.txt",
)

sh_binary(
    name = "setup_ci",
    srcs = [
        "setup_ci.sh",
    ],
)

load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load(
    "@jvolkman_rules_pycross//pycross:defs.bzl",
    "pycross_lock_file",
    "pycross_pdm_lock_model",
    "pycross_target_environment",
)

_darwin_x86_64 = [
    "@platforms//os:macos",
    "@platforms//cpu:x86_64",
]

_darwin_arm64 = [
    "@platforms//os:macos",
    "@platforms//cpu:arm64",
]

_linux_x86_64 = [
    "@platforms//os:linux",
    "@platforms//cpu:x86_64",
]

_linux_arm64 = [
    "@platforms//os:linux",
    "@platforms//cpu:arm64",
]

# platform(
#     name = "darwin_x86_64",
#     constraint_values = _darwin_x86_64,
# )

platform(
    name = "darwin_arm64",
    constraint_values = _darwin_arm64,
)

platform(
    name = "linux_x86_64",
    constraint_values = _linux_x86_64,
)

platform(
    name = "linux_arm64",
    constraint_values = _linux_arm64,
)

# pycross_target_environment(
#     name = "python_darwin_x86_64",
#     abis = ["cp310"],
#     platforms = ["macosx_12_0_x86_64"],
#     python_compatible_with = _darwin_x86_64,
#     version = "3.9.12",
#     visibility = ["//visibility:public"],
# )

pycross_target_environment(
    name = "python_darwin_arm64",
    abis = ["cp310"],
    platforms = ["macosx_12_0_arm64"],
    python_compatible_with = _darwin_arm64,
    version = "3.10.13",
    # visibility = ["//visibility:public"],
)

pycross_target_environment(
    name = "python_linux_x86_64",
    abis = ["cp310"],
    platforms = [
        "linux_x86_64",
        "manylinux2014_x86_64",
    ] + [
        "manylinux_2_%s_x86_64" % str(i)
        for i in range(17, 25)
    ],
    python_compatible_with = _linux_x86_64,
    version = "3.10.13",
    # visibility = ["//visibility:public"],
)

pycross_target_environment(
    name = "python_linux_arm64",
    abis = ["cp310"],
    platforms = [
        "linux_aarch64",
        "manylinux2014_aarch64",
    ] + [
        "manylinux_2_%s_aarch64" % str(i)
        for i in range(17, 25)
    ],
    python_compatible_with = _linux_arm64,
    version = "3.10.13",
    # visibility = ["//visibility:public"],
)

pycross_pdm_lock_model(
    name = "pdm-setup_lock_model",
    dev = True,
    groups = [
        "default",
        # "dev",
    ],
    lock_file = "pdm.lock",
    project_file = "pyproject.toml",
)

pycross_lock_file(
    name = "pdm-setup_lock",
    out = "pdm-setup_lock.bzl",
    # always_build_packages = [
    #     "pbr@5.11.1",
    #     "setproctitle",
    #     #        "numpy",  # Doesn't work with zig cc since numpy can't detect the compiler type (assumes gcc)
    # ],
    # build_target_overrides = {
    #     "future@0.18.3": "@//deps:overridden_future_0.18.3",
    # },
    default_alias_single_version = True,
    # local_wheels = [
    #     "//wheels",
    # ],
    lock_model_file = ":pdm-setup_lock_model",
    package_build_dependencies = {
        # "cffi": [
        #     "setuptools",
        #     "wheel",
        # ],
        # "setproctitle": [
        #     "setuptools",
        #     "wheel",
        # ],
        # "cowsay": [
        #     "setuptools",
        #     "wheel",
        # ],
        # "tree-sitter": [
        #     "setuptools",
        #     "wheel",
        # ],
        # "pbr": [
        #     "setuptools",
        #     "wheel",
        # ],
        # "django-allauth": [
        #     "setuptools",
        #     "wheel",
        # ],
        # "greenlet": [
        #     "setuptools",
        #     "wheel",
        # ],
        # "sqlalchemy": [
        #     "setuptools",
        #     "wheel",
        # ],
    },
    pypi_index = "https://pypi.org",
    # remote_wheels = {
    #     "https://files.pythonhosted.org/packages/3.7/x/xmltodict/xmltodict-0.12.0-py2.py3-none-any.whl": "8bbcb45cc982f48b2ca8fe7e7827c5d792f217ecf1792626f808bf41c3b86051",
    # },
    target_environments = [
        ":python_darwin_arm64",
        ":python_linux_x86_64",
        ":python_linux_arm64",
    ],
)

task(
    name = "update_pdm-setup_lock",
    cmds = [
        "cp -fv $LOCK_FILE $BUILD_WORKSPACE_DIRECTORY",
    ],
    env = {
        "LOCK_FILE": cmd.file(":pdm-setup_lock"),
    },
)
