load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//:prettier/package_json.bzl", prettier_bin = "bin")
load("@rules_task//:defs.bzl", "cmd", "task")
load("@rules_task//tools:defs.bzl", "compile_pip_requirements")
load("@bazel_tools//tools/python:toolchain.bzl", "py_runtime_pair")

package(default_visibility = ["//visibility:public"])

exports_files(["WORKSPACE"])

npm_link_all_packages(name = "node_modules")

bool_flag(
    name = "setup_debug_flag",
    build_setting_default = False,
)

config_setting(
    name = "setup_debug",
    flag_values = {
        "//:setup_debug_flag": "True",
    },
)

filegroup(
    name = "prettier-files",
    srcs = glob([
        "**/*.js",
        "**/*.ts",
        "**/*.tsx",
        "**/*.json",
        "**/*.md",
        "**/*.yml",
        "**/*.yaml",
    ]) + [
        ".prettierignore",
        ".prettierrc",
    ],
)

prettier_bin.prettier_binary(
    name = "prettier_bin",
)

task(
    name = "prettier",
    cmds = [
        cmd.shell(
            cmd.executable(":prettier_bin"),
            "$CLI_ARGS",
        ),
    ],
    cwd = "{{ os.environ.get('BUILD_WORKING_DIRECTORY', os.getcwd()) }}",
    env = {
        "BAZEL_BINDIR": ".",
    },
)

prettier_bin.prettier_test(
    name = "prettier_test",
    args = [
        "--check",
        ".",
    ],
    data = [":prettier-files"],
)

filegroup(
    name = "bazel-files",
    srcs = glob([
        "**/*.bazel",
        "**/WORKSPACE",
        "**/WORKSPACE.bzlmod",
        "**/*.bzl",
    ]),
)

compile_pip_requirements(
    name = "requirements",
    extra_args = [
        "--allow-unsafe",
    ],
    hidden_args = [
        "--verbose",
    ],
    requirements_in = "requirements.in",
    requirements_txt = "requirements.txt",
)

constraint_setting(name = "shine_containerized")

constraint_value(
    name = "shine_run_in_container",
    constraint_setting = ":shine_containerized",
)

platform(
    name = "shine_platform",
    constraint_values = [
        ":shine_run_in_container",
    ],
)

py_runtime(
    name = "shine_container_py2_runtime",
    interpreter_path = "/shine",
    python_version = "PY2",
)

py_runtime(
    name = "shine_container_py3_runtime",
    interpreter_path = "/shine",
    python_version = "PY3",
)

py_runtime_pair(
    name = "shine_container_py_runtime_pair",
    py2_runtime = ":shine_container_py2_runtime",
    py3_runtime = ":shine_container_py3_runtime",
)

toolchain(
    name = "shine_container_py_toolchain",
    target_compatible_with = [
        ":shine_run_in_container",
    ],
    toolchain = ":shine_container_py_runtime_pair",
    toolchain_type = "@bazel_tools//tools/python:toolchain_type",
)
