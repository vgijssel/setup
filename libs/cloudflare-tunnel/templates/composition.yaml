apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: cloudflare-tunnel-composition
  labels: {{- include "cloudflare-tunnel.labels" . | nindent 4 }}
spec:
  compositeTypeRef:
    apiVersion: tunnel.crossplane.io/v1alpha1
    kind: XCloudflareTunnel

  mode: Pipeline
  pipeline:
    - step: create-resources
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            ---
            apiVersion: opentofu.upbound.io/v1beta1
            kind: Workspace
            metadata:
              name: {{`{{ .observed.composite.resource.metadata.name }}`}}-workspace
              annotations:
                crossplane.io/external-name: {{`{{ .observed.composite.resource.metadata.name }}`}}-workspace
                gotemplating.fn.crossplane.io/composition-resource-name: workspace
            spec:
              forProvider:
                source: Inline
                module: |
                  terraform {
                    required_providers {
                      cloudflare = {
                        source = "cloudflare/cloudflare"
                        version = "5.9.0"
                      }
                    }
                  }

                  variable "cloudflare_api_token" {
                    description = "Cloudflare API token"
                    type        = string
                    sensitive   = true
                  }

                  variable "cloudflare_account_id" {
                    description = "Cloudflare account ID"
                    type        = string
                    sensitive   = true
                  }

                  variable "tunnel_name" {
                    description = "Cloudflare tunnel name"
                    type        = string
                  }

                  variable "tunnel_service" {
                    description = "Service URL for the tunnel"
                    type        = string
                  }

                  variable "zone_name" {
                    description = "Cloudflare zone name"
                    type        = string
                  }

                  locals {
                    tunnel_hostname = "${var.tunnel_name}.${var.zone_name}"
                  }

                  provider "cloudflare" {
                    api_token = var.cloudflare_api_token
                  }

                  resource "cloudflare_zero_trust_tunnel_cloudflared" "example" {
                    account_id = var.cloudflare_account_id
                    name       = var.tunnel_name
                  }

                  resource "cloudflare_zero_trust_tunnel_cloudflared_config" "example" {
                    account_id = var.cloudflare_account_id
                    tunnel_id  = cloudflare_zero_trust_tunnel_cloudflared.example.id

                    config = {
                      ingress = [
                        {
                          hostname = local.tunnel_hostname
                          service  = var.tunnel_service
                        },
                        {
                          service = "http_status:404"
                        }
                      ]
                    }
                  }

                  data "cloudflare_zero_trust_tunnel_cloudflared_token" "example" {
                    account_id = var.cloudflare_account_id
                    tunnel_id  = cloudflare_zero_trust_tunnel_cloudflared.example.id
                  }

                  resource "cloudflare_dns_record" "tunnel_cname" {
                    zone_id = data.cloudflare_zone.vgijssel_dev.zone_id
                    name    = local.tunnel_hostname
                    ttl     = 1
                    type    = "CNAME"
                    proxied = true
                    content = "${cloudflare_zero_trust_tunnel_cloudflared.example.id}.cfargotunnel.com"
                  }

                  data "cloudflare_zones" "available" {
                  }

                  data "cloudflare_zone" "vgijssel_dev" {
                    filter = {
                      name = var.zone_name
                    }
                  }

                  output "available_zones" {
                    value = data.cloudflare_zones.available.result
                  }

                  output "tunnel_id" {
                    value = cloudflare_zero_trust_tunnel_cloudflared.example.id
                  }

                  output "tunnel_token" {
                    value     = data.cloudflare_zero_trust_tunnel_cloudflared_token.example.token
                    sensitive = true
                  }
                vars:
                - key: tunnel_name
                  value: "{{`{{ .observed.composite.resource.spec.parameters.tunnel.name }}`}}"
                - key: tunnel_service
                  value: "{{`{{ .observed.composite.resource.spec.parameters.tunnel.service }}`}}"
                - key: zone_name
                  value: "{{`{{ .observed.composite.resource.spec.parameters.tunnel.zone }}`}}"
                env:
                - name: TF_VAR_cloudflare_api_token
                  secretKeyRef:
                    name: cloudflare-tunnel
                    key: credential
                    namespace: "{{`{{ .observed.composite.resource.spec.claimRef.namespace }}`}}"
                - name: TF_VAR_cloudflare_account_id
                  secretKeyRef:
                    name: cloudflare-tunnel
                    key: username
                    namespace: "{{`{{ .observed.composite.resource.spec.claimRef.namespace }}`}}"
              writeConnectionSecretToRef:
                name: cloudflare-tunnel-outputs
                namespace: "{{`{{ .observed.composite.resource.spec.claimRef.namespace }}`}}"
              providerConfigRef:
                name: default
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: {{`{{ .observed.composite.resource.metadata.name }}`}}
              namespace: {{`{{ .observed.composite.resource.spec.claimRef.namespace }}`}}
              annotations:
                crossplane.io/external-name: {{`{{ .observed.composite.resource.metadata.name }}`}}
                gotemplating.fn.crossplane.io/composition-resource-name: deployment
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app.kubernetes.io/name: {{`{{ .observed.composite.resource.metadata.name }}`}}
              template:
                metadata:
                  labels:
                    app.kubernetes.io/name: {{`{{ .observed.composite.resource.metadata.name }}`}}
                spec:
                  securityContext: {}
                  containers:
                  - name: cloudflared
                    image: "{{`{{ .observed.composite.resource.spec.parameters.image.registry }}`}}/{{`{{ .observed.composite.resource.spec.parameters.image.repository }}`}}:{{`{{ .observed.composite.resource.spec.parameters.image.tag }}`}}"
                    imagePullPolicy: {{`{{ .observed.composite.resource.spec.parameters.image.pullPolicy }}`}}
                    command:
                    - cloudflared
                    - tunnel
                    - --no-autoupdate
                    - --loglevel
                    - debug
                    - --metrics
                    - 0.0.0.0:2000
                    - run
                    - --token
                    - $(TUNNEL_TOKEN)
                    env:
                    - name: TUNNEL_TOKEN
                      valueFrom:
                        secretKeyRef:
                          name: cloudflare-tunnel-outputs
                          key: tunnel_token
                    livenessProbe:
                      httpGet:
                        path: /ready
                        port: 2000
                      failureThreshold: 3
                      initialDelaySeconds: 30
                      periodSeconds: 30
                    resources:
                      limits:
                        cpu: 100m
                        memory: 128Mi
                      requests:
                        cpu: 50m
                        memory: 64Mi
    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready
      input:
        apiVersion: autoready.fn.crossplane.io/v1beta1
        kind: Input
        rules:
        - resource:
            apiVersion: apps/v1
            kind: Deployment
          readinessChecks:
          - type: MatchCondition
            matchCondition:
              type: Available
              status: "True"
