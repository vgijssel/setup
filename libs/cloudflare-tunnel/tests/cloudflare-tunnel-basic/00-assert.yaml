# Validate OpenTofu provider is running
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-opentofu
status:
  conditions:
    - type: Healthy
      status: "True"
    - type: Installed
      status: "True"
---
# Validate Go Templating function is running
apiVersion: pkg.crossplane.io/v1
kind: Function
metadata:
  name: crossplane-contrib-function-go-templating
status:
  conditions:
    - type: Healthy
      status: "True"
    - type: Installed
      status: "True"
---
# Validate example-nginx deployment is running
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-nginx
  namespace: default
status:
  readyReplicas: 1
---
# Validate example-nginx service exists
apiVersion: v1
kind: Service
metadata:
  name: example-nginx
  namespace: default
spec:
  type: ClusterIP
  ports:
    - port: 80
---
# Validate cloudflare-tunnel secret exists
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-tunnel
type: Opaque
---
# Validate CloudflareTunnel composite resource is ready
apiVersion: tunnel.crossplane.io/v1alpha1
kind: CloudflareTunnel
metadata:
  name: cloudflare-tunnel
status:
  conditions:
    - type: Synced
      status: "True"
---
# Validate that the CloudflareTunnel composition creates the expected managed resources
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
metadata:
  name: validate-managed-resources
timeout: 120
---
# Validate that a workspace is created with the expected name pattern
apiVersion: opentofu.upbound.io/v1beta1
kind: Workspace
metadata:
  name: cloudflare-tunnel-*-workspace
status:
  conditions:
    - type: Synced
      status: "True"
---
# Validate that a deployment is created
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflare-tunnel-*
  namespace: $NAMESPACE
status:
  readyReplicas: 1
