# Copied from https://github.com/thought-machine/pleasings/blob/master/docker/docker.build_defs
def docker_build(name:str, srcs:list = [], dockerfile:str = "Dockerfile", test_only:bool = False, visibility:list = None) -> str:
    """docker_build builds a Dockerfile and saves the result as a tarball
    Args:
      name: Name of the rule.
      srcs: Source files that are available within the dockerfile.
      dockerfile: The Dockerfile that defines how to build this image.
      test_only: If True, this can only be depended on by test rules.
    """

    def _docker_build(platform:str) -> str:
        build_name = f"{name}_{platform}".replace('/', '_')
        out_dir = build_name
        tag_file = f"{out_dir}/{build_name}.sha"
        archive_file = f"{out_dir}/{build_name}.tar"

        return genrule(
            name = build_name,
            srcs = {
                "dockerfile": dockerfile,
                "srcs": srcs,
            },
            cmd = f"""
            set -Eeou pipefail

            mkdir -p {out_dir}
            docker buildx build --platform {platform} --iidfile {tag_file} -f $SRCS_DOCKERFILE $PKG
            IMAGE_NAME="$(cat {tag_file})"
            docker save "$IMAGE_NAME" > {archive_file}
            """,
            entry_points = {
                "archive": archive_file,
                "tag": tag_file,
            },
            outs = [out_dir],
            test_only = test_only,
            visibility = visibility,
        )

    provides = {
        "linux_amd64": _docker_build('linux/amd64'),
        "darwin_amd64": _docker_build('darwin/amd64'),
    }

    return filegroup(
        name = name,
        provides = provides,
        visibility = visibility,
        test_only=test_only,
    )