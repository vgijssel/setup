#!/usr/bin/env bash
set -e

# Colors for better readability
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${GREEN}=== Nx Monorepo Help ===${NC}"
echo ""

# Get all projects dynamically
echo -e "${BLUE}Available Projects:${NC}"
PROJECTS=$(nx show projects --json 2>/dev/null | jq -r '.[]' | sort) || true
if [[ -n "${PROJECTS}" ]]; then
    while IFS= read -r project; do
        echo "  • ${project}"
    done <<< "${PROJECTS}"
else
    echo "  No projects found"
fi
echo ""

# Collect all unique targets across all projects
echo -e "${BLUE}Available Targets by Project:${NC}"

# Create associative arrays to store target info (unused for now but reserved for future use)
# declare -A all_targets
# declare -A target_descriptions

# Function to get project details and extract targets
get_project_targets() {
    local project=$1
    local project_data
    project_data=$(nx show project "${project}" --json 2>/dev/null) || return 0

    if [[ -n "${project_data}" ]]; then
        echo "  ${CYAN}${project}:${NC}"

        # Extract targets using jq
        echo "${project_data}" | jq -r '.targets | to_entries[] | "    • \(.key) - \(.value.description // "No description available")"' 2>/dev/null || {
            # Fallback if description extraction fails
            echo "${project_data}" | jq -r '.targets | keys[]' 2>/dev/null | sed 's/^/    • /' || echo "    No targets found"
        } || true
        echo ""
    fi
}

# Get targets for each project
if [[ -n "${PROJECTS}" ]]; then
    while IFS= read -r project; do
        get_project_targets "${project}"
    done <<< "${PROJECTS}"
fi

# Show common workspace commands
echo -e "${BLUE}Common Workspace Commands:${NC}"
echo -e "${YELLOW}Project Commands:${NC}"
echo "  • nx run <project>:<target>  - Run a specific target for a project"
echo "  • nx show project <name>     - Show detailed information about a project"
echo ""

echo -e "${YELLOW}Multi-Project Commands:${NC}"
echo "  • nx run-many -t <target>    - Run a target across multiple projects"
echo "  • nx affected:<target>       - Run target only on affected projects"
echo "  • nx affected:graph          - Show dependency graph of affected projects"
echo ""

echo -e "${YELLOW}Workspace Management:${NC}"
echo "  • nx show projects           - List all projects in the workspace"
echo "  • nx graph                   - Open interactive project dependency graph"
echo "  • nx list                    - List installed Nx plugins"
echo "  • nx release                 - Create releases with GitHub artifacts"
echo "  • nx reset                   - Clear Nx cache and reset workspace"
echo ""

echo -e "${YELLOW}Code Quality:${NC}"
echo "  • nx format:write            - Format all code in the workspace"
echo "  • nx format:check            - Check code formatting"
echo "  • trunk fmt                  - Format code using Trunk"
echo "  • trunk check                - Run all linters and checks"
echo ""

# Show tips
echo -e "${GREEN}Tips:${NC}"
echo "  • Use tab completion with nx commands when available"
echo "  • Add '--dry-run' to see what would be executed without running it"
echo "  • Use '--verbose' for detailed output"
echo "  • Use '--help' with any nx command for detailed options"
echo ""

# Dynamic examples based on actual projects
echo -e "${GREEN}Examples:${NC}"
if [[ -n "${PROJECTS}" ]]; then
    # Get first few projects for examples
    first_project=$(echo "${PROJECTS}" | head -1) || true
    second_project=$(echo "${PROJECTS}" | head -2 | tail -1) || true

    if [[ -n "${first_project}" ]]; then
        echo "  • nx show project ${first_project}"
        first_targets=$(nx show project "${first_project}" --json 2>/dev/null | jq -r '.targets | keys[]' 2>/dev/null | head -2) || true
        if [[ -n "${first_targets}" ]]; then
            echo "${first_targets}" | while read -r target; do
                [[ -n "${target}" ]] && echo "  • nx run ${first_project}:${target}"
            done
        fi
    fi

    if [[ -n "${second_project}" && "${second_project}" != "${first_project}" ]]; then
        echo "  • nx show project ${second_project}"
    fi
else
    echo "  • nx show projects"
fi

echo "  • nx affected:test --base=main"
echo "  • nx run-many -t build --parallel"