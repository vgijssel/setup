export GITHUB_DOCKER_REGISTRY=docker.pkg.github.com/mvgijssel/setup
export BASE_IMAGE=base-image
export IMAGE_BUILDER_IMAGE=image-builder
export DIGITAL_REBAR_IMAGE=digitalrebar
export TF_VAR_digital_rebar_image="$DIGITAL_REBAR_IMAGE"

export UBUNTU_IMAGE="https://cloud-images.ubuntu.com/groovy/current/groovy-server-cloudimg-amd64.img"
export PKR_VAR_ubuntu_image="$UBUNTU_IMAGE"
export UBUNTU_CHECKSUM="http://cloud-images.ubuntu.com/groovy/current/SHA256SUMS"
export PKR_VAR_ubuntu_checksum="$UBUNTU_CHECKSUM"

export LOCAL_NETWORK_DOMAIN=setup.test
export LOCAL_NETWORK_REGISTRY_FQDN="registry.$LOCAL_NETWORK_DOMAIN"
export LOCAL_NETWORK_BRIDGE_INTERFACE=bridge1
export LOCAL_NETWORK_INTERNET_INTERFACES=en0,en7
export LOCAL_NETWORK_BRIDGE_IP=192.168.5.1
export LOCAL_NETWORK_NETMASK=255.255.255.0
export LOCAL_NETWORK_BROADCAST=192.168.5.255
export LOCAL_NETWORK_DHCP_START=192.168.5.100
export LOCAL_NETWORK_DHCP_END=192.168.5.200

export KUBERNETES_INGRESS_IP=192.168.5.10
export TF_VAR_kubernetes_ingress_ip="$KUBERNETES_INGRESS_IP"

export KUBERNETES_METALLB_IP_START=192.168.5.10
export TF_VAR_kubernetes_metallb_ip_start="$KUBERNETES_METALLB_IP_START"
export KUBERNETES_METALLB_IP_END=192.168.5.30
export TF_VAR_kubernetes_metallb_ip_end="$KUBERNETES_METALLB_IP_END"

export PROVISIONER_HOSTNAME="provisioner"
export PROVISIONER_FQDN="$PROVISIONER_HOSTNAME.$LOCAL_NETWORK_DOMAIN"

export LIBVIRT_HOSTNAME="libvirt"
export LIBVIRT_FQDN="$LIBVIRT_HOSTNAME.$LOCAL_NETWORK_DOMAIN"
export LIBVIRT_VM_DIR="/data/vms"

export RADARR_HOSTNAME="radarr"
export RADARR_FQDN="$RADARR_HOSTNAME.$LOCAL_NETWORK_DOMAIN"

export TF_VAR_libvirt_vm_dir="$LIBVIRT_VM_DIR"
export TF_VAR_libvirt_fqdn="$LIBVIRT_FQDN"
export TF_VAR_parent_domain="$LOCAL_NETWORK_DOMAIN"
export TF_VAR_radarr_hostname="$RADARR_HOSTNAME"
export TF_VAR_radarr_fqdn="$RADARR_FQDN"
export TF_VAR_provisioner_fqdn="$PROVISIONER_FQDN"

# Only if the CI variable does not exist
# If NOT on the CI, executing on local machine
if [ -z "${CI+x}" ]; then
  export CI=false
fi

export CI_SEMAPHORE=false
export CI_GITHUB=false

if [[ "${CI}" = true ]]; then
  export CI=true

  export SETUP_DOCKER_REGISTRY="${GITHUB_DOCKER_REGISTRY}"

  # If NOT semaphore ci use the Github ref
  if [ -z "${SEMAPHORE_GIT_REF+x}" ]; then
      export GIT_REF="$GITHUB_REF"
      export GIT_BRANCH="${GITHUB_REF#refs/heads/}"
      export CI_GITHUB=true
  else
      export GIT_REF="$SEMAPHORE_GIT_REF"
      export GIT_BRANCH="$SEMAPHORE_GIT_BRANCH"
      export CI_SEMAPHORE=true
  fi

  export GOPATH="$HOME/go"

  # Disable checking for hosts key on the CI
  export ANSIBLE_HOST_KEY_CHECKING=False
else
  export CI=false

  export SETUP_DOCKER_REGISTRY="$LOCAL_NETWORK_REGISTRY_FQDN"

  # Only set the GITHUB REF locally (not in the CI)
  export GIT_REF="refs/heads/$(git rev-parse --abbrev-ref HEAD)"

  export ANSIBLE_HOST_KEY_CHECKING=True
fi


export DOCKER_BUILDKIT=0
export DOCKER_CONFIG="$HOME/.docker"
export TF_VAR_docker_registry="$SETUP_DOCKER_REGISTRY"

# export IP_ADDRESS=$(ipconfig getifaddr en0)

export SETUP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
export DEVELOPMENT_DIR="$(dirname $SETUP_DIR)"
export SETUP_DOTFILES_DIR="${SETUP_DIR}/dotfiles"
export SETUP_SCRIPTS_DIR="${SETUP_DIR}/scripts"
export SETUP_BASE_IMAGE_DIR="${SETUP_DIR}/base-image"
export SETUP_LOG_DIR="${SETUP_DIR}/log"
export PKR_VAR_setup_log_dir="$SETUP_LOG_DIR"
export SETUP_IMAGE_DIR="${SETUP_DIR}/image"
export PKR_VAR_setup_image_dir="$SETUP_IMAGE_DIR"
export SETUP_BOX_DIR="${SETUP_DIR}/box"
export PKR_VAR_setup_box_dir="$SETUP_BOX_DIR"
export SETUP_TMP_DIR="${SETUP_DIR}/tmp"
export SETUP_DIGITAL_REBAR_DIR="${SETUP_DIR}/digitalrebar"
export SETUP_PROVISIONER_DIR="${SETUP_DIR}/provisioner"
export PKR_VAR_setup_provisioner_dir="$SETUP_PROVISIONER_DIR"
export SETUP_KUBERNETES_CORE_DIR="${SETUP_DIR}/kubernetes_core"
export SETUP_KUBERNETES_NODES_DIR="${SETUP_DIR}/kubernetes_nodes"
export SETUP_UNIFI_DIR="${SETUP_DIR}/unifi"
export SETUP_IMAGE_BUILDER_DIR="${SETUP_DIR}/image-builder"
export SETUP_ELEMENTS_DIR="${SETUP_DIR}/elements"
export ELEMENTS_PATH="$SETUP_ELEMENTS_DIR"
export SETUP_LIBVIRT_DIR="${SETUP_DIR}/libvirt"
export SETUP_SECRETS_DIR="${SETUP_DIR}/secrets"

export LOCAL_NETWORK_SSH_CONFIG_PATH="$SETUP_TMP_DIR/ssh_config"

export PRIVATE_KEY_PATH="$SETUP_SECRETS_DIR/id_rsa.development"
export PUBLIC_KEY_PATH="$SETUP_SECRETS_DIR/id_rsa.development.pub"
export TF_VAR_public_key_path="${PUBLIC_KEY_PATH}"

export KUBERNETES_CONFIG_PATH="$SETUP_TMP_DIR/kube_config"
export KUBECONFIG="$KUBERNETES_CONFIG_PATH"
export KUBE_CONFIG="$KUBECONFIG"
export TF_VAR_kube_config_path="$KUBECONFIG"

export TF_VAR_setup_root_dir="${SETUP_DIR}"
export TF_VAR_setup_secrets_dir="${SETUP_SECRETS_DIR}"

export LOCAL_NETWORK_DNSMASQ_PID="$SETUP_TMP_DIR/dnsmasq.pid"

export PACKER_CACHE_DIR="$SETUP_TMP_DIR/packer_cache"

export SETUP_ANSIBLE_DIR="$SETUP_DIR/ansible"
export ANSIBLE_FILTER_PLUGINS="$SETUP_ANSIBLE_DIR/filter_plugins"

export SETUP_ANSIBLE_DIR="$SETUP_DIR/ansible"
export ANSIBLE_FILTER_PLUGINS="$SETUP_ANSIBLE_DIR/filter_plugins"

export BAZEL_OUTPUT_USER_ROOT="$HOME/.cache/bazel"

# Ensure gnutar tar binary is in front of the path
export PATH=\
"${SETUP_SCRIPTS_DIR}:"\
"/usr/local/opt/gnu-tar/libexec/gnubin:"\
"${PATH}"

export VAGRANT_EXPERIMENTAL="cloud_init,disks"
