# for debugging https://github.com/marketplace/actions/debugging-with-tmate

env:
  CONTAINER_REGISTRY: ghcr.io
  DEVCONTAINER_IMAGE: ghcr.io/mvgijssel/setup/tools/devcontainer

name: Test
on: [push]
jobs:
  cancel_previous_run:
    name: Cancel Previous Run
    timeout-minutes: 2
    runs-on: ubuntu-latest
    steps:
      - name: cancel previous runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

  build_devcontainer:
    name: Build and push the devcontainer image
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      output1: ${{ steps.step1.outputs.test }}
    steps:
      # # https://docs.github.com/en/actions/learn-github-actions/contexts
      # - name: Dump GitHub env
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #     ENV_CONTEXT: ${{ toJson(env) }}
      #     VARS_CONTEXT: ${{ toJson(vars) }}
      #     JOB_CONTEXT: ${{ toJson(job) }}
      #     # JOBS_CONTEXT: ${{ toJson(jobs) }}
      #     STEPS_CONTEXT: ${{ toJson(steps) }}
      #     RUNNER_CONTEXT: ${{ toJson(runner) }}
      #     SECRETS_CONTEXT: ${{ toJson(secrets) }}
      #     STRATEGY_CONTEXT: ${{ toJson(strategy) }}
      #     MATRIX_CONTEXT: ${{ toJson(matrix) }}
      #     NEEDS_CONTEXT: ${{ toJson(needs) }}
      #     INPUTS_CONTEXT: ${{ toJson(inputs) }}
      #   run: env
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the GitHub Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DEVCONTAINER_IMAGE }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: tools/devcontainer/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.DEVCONTAINER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DEVCONTAINER_IMAGE }}:buildcache,mode=max

  select_tests_to_run:
    name: Select Tests to Run
    timeout-minutes: 4
    runs-on: ubuntu-latest
    outputs:
      run-workstation-test: ${{ steps.changed-test-targets.outputs.workstation-test }}
      run-hypervisor-test: ${{ steps.changed-test-targets.outputs.hypervisor-test }}
      run-occupancy_component-test: ${{ steps.changed-test-targets.outputs.occupancy_component-test }}
    steps:
      - uses: actions/checkout@v1
      - uses: ./.github/actions/setup-bazel
      - id: changed-test-targets
        run: bazel run //tools/bazel:changed-test-targets

  # pre-commit-check:
  #   name: pre-commit check
  #   timeout-minutes: 30
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: ./.github/actions/setup-bazel
  #     - run: bazel run //tools/pre-commit -- run --all-files --show-diff-on-failure

  occupancy_component-test:
    if: needs.select_tests_to_run.outputs.run-occupancy_component-test == 'true'
    name: Occupancy Component test
    needs: select_tests_to_run
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: ./.github/actions/setup-bazel
      - run: bazel test //occupancy_component:test

  workstation-test:
    if: needs.select_tests_to_run.outputs.run-workstation-test == 'true'
    name: Workstation test
    needs: select_tests_to_run
    timeout-minutes: 30
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v1
      - uses: ./.github/actions/setup-bazel
      # removing the aws CLI so it can be installed by the workstation provisioning
      - run: rm /usr/local/bin/aws /usr/local/bin/aws_completer
      - run: brew install docker
      - run: colima start
      - run: docker info
      - run: bazel run //workstation:test
# lefthook
# black
# prettier
# python
# buildifier
