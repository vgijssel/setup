load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@occupancy_component//:requirements.bzl", "requirement")
load("//tools/pytest:pytest.bzl", "py_pytest_test")
load("//tools/command:command.bzl", "command")

compile_pip_requirements(
    name = "requirements",
    extra_args = ["--allow-unsafe"],
    requirements_in = "requirements.in",
    requirements_txt = "requirements.lock",
)

py_library(
    name = "lib",
    srcs = [
        "custom_components/occupancy/__init__.py",
        "custom_components/occupancy/const.py",
    ],
    data = [
        "custom_components/occupancy/manifest.json",
    ],
    imports = ["."],
)

py_pytest_test(
    name = "test",
    size = "small",
    srcs = [
        "tests/conftest.py",
        "tests/test_init.py",
    ],
    imports = ["."],
    deps = [
        ":lib",
        requirement("pytest-homeassistant-custom-component"),
    ],
)

# NOTE: not using the orignal command because of:
# 1. need a cwd argument to indicate where the command should be run from
# 2. nesting of commands with custom cwds should work
# 3. extendability with custom code, before/after commands which can influence the environment. For example add envconsul data to the environment
#
# before_script can be regular Python
# cmd, env, args

sh_binary(
    name = "henk",
    srcs = [
        "henk.sh",
    ],
)

command(
    name = "tilt",
    before_script = """
    print("papi")
    """,
    cmd = "@tilt_arm64//:tilt_binary",
    # cmd = ":henk",
    cwd = "{{ os.path.dirname(r.Rlocation('$(rlocationpath :Tiltfile)')) }}",
    data = [
        ":Tiltfile",
    ],
    env = {
        "KERK": "shine",
    },
)

# optional arguments

# command(
#     name = "dev",
#     arguments = [
#         "up",
#         "--port",
#         "10350",
#     ],
#     command = ":tilt",
#     working_directory = "kerk",
# )

# command(
#     name = "dev",
#     arguments = [
#         "up",
#         "--port",
#         "10350",
#     ],
#     command = "//tools/tilt",
#     data = [
#         ":Tiltfile",
#         ":docker-compose.yml",
#         "//tools/tilt:post_build/Tiltfile",
#     ],
#     working_directory = "$$(dirname $(location :Tiltfile))",
# )
