receivers:
  jaeger:
    protocols:
      thrift_compact:
        endpoint: "0.0.0.0:6831"
      thrift_binary:
        endpoint: "0.0.0.0:6832"
      grpc:
        endpoint: "0.0.0.0:14250"
      thrift_http:
        endpoint: "0.0.0.0:14268"
  opencensus:
    endpoint: "0.0.0.0:55678"
  otlp:
    protocols:
      grpc:
        endpoint: "0.0.0.0:4317"
      http:
        endpoint: "0.0.0.0:4318"
  zipkin:
    endpoint: "0.0.0.0:9411"
  otlp/spanmetrics:
    protocols:
      grpc:
        endpoint: :12345
  prometheus:
    config:
      global:
        external_labels:
          p8s_logzio_name: spm-otel
      scrape_configs:
        - job_name: "spm"
          scrape_interval: 15s
          static_configs:
            - targets: ["localhost:8889"]

exporters: ${file:/etc/otel/logzio_exporter.yaml}

processors:
  batch:
  tail_sampling:
    policies:
      [
        {
          name: policy-errors,
          type: status_code,
          status_code: { status_codes: [ERROR] },
        },
        { name: policy-slow, type: latency, latency: { threshold_ms: 1000 } },
        {
          name: policy-random-ok,
          type: probabilistic,
          probabilistic: { sampling_percentage: 10 },
        },
      ]
  spanmetrics:
    metrics_exporter: prometheus
    latency_histogram_buckets:
      [
        2ms,
        6ms,
        10ms,
        100ms,
        250ms,
        500ms,
        1000ms,
        10000ms,
        100000ms,
        1000000ms,
      ]
    # Additional list of dimensions on top of:
    # - service.name
    # - operation
    # - span.kind
    # - status.code
    dimensions:
      # If the span is missing http.method, the processor will insert
      # the http.method dimension with value 'GET'.
      # For example, in the following scenario, http.method is not present in a span and so will be added as a dimension to the metric with value "GET":
      # - promexample_calls{http_method="GET",operation="/Address",service_name="shippingservice",span_kind="SPAN_KIND_SERVER",status_code="STATUS_CODE_UNSET"} 1
      - name: http.method
        default: GET
      # If a default is not provided, the http.status_code dimension will be omitted
      # if the span does not contain http.status_code.
      # For example, consider a scenario with two spans, one span having http.status_code=200 and another missing http.status_code. Two metrics would result with this configuration, one with the http_status_code omitted and the other included:
      # - promexample_calls{http_status_code="200",operation="/Address",service_name="shippingservice",span_kind="SPAN_KIND_SERVER",status_code="STATUS_CODE_UNSET"} 1
      # - promexample_calls{operation="/Address",service_name="shippingservice",span_kind="SPAN_KIND_SERVER",status_code="STATUS_CODE_UNSET"} 1
      - name: http.status_code

extensions:
  pprof:
    endpoint: :1777
  zpages:
    endpoint: :55679
  health_check:

service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    traces:
      receivers: [otlp, jaeger, opencensus, zipkin]
      processors: [spanmetrics, batch]
      exporters: [logzio/traces]
    metrics/spanmetrics:
      # This receiver is just a dummy and never used.
      # Added to pass validation requiring at least one receiver in a pipeline.
      receivers: [otlp/spanmetrics]
      exporters: [prometheus]
    metrics:
      receivers: [prometheus]
      exporters: [logging, prometheusremotewrite/spm]
  telemetry:
    logs:
      level: "debug"
# docker run -v /Users/maarten/Development/setup/config.yaml:/etc/otel/config.yaml -v /Users/maarten/Development/setup/tmp/logzio_exporter.yaml:/etc/otel/logzio_exporter.yaml  -p 127.0.0.1:4317:4317 -p 127.0.0.1:55679:55679 -p 127.0.0.1:13133:13133 otel/opentelemetry-collector-contrib:0.77.0 --config /etc/otel/config.yaml
